/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.botnet_p2p.Message', null, global);
goog.exportSymbol('proto.botnet_p2p.Message.CommandMsg', null, global);
goog.exportSymbol('proto.botnet_p2p.Message.CommandResponseMsg', null, global);
goog.exportSymbol('proto.botnet_p2p.Message.Contact', null, global);
goog.exportSymbol('proto.botnet_p2p.Message.FileChunkMsg', null, global);
goog.exportSymbol('proto.botnet_p2p.Message.FileRequestMsg', null, global);
goog.exportSymbol('proto.botnet_p2p.Message.FindNodeMsg', null, global);
goog.exportSymbol('proto.botnet_p2p.Message.FoundNodesMsg', null, global);
goog.exportSymbol('proto.botnet_p2p.Message.MessageType', null, global);
goog.exportSymbol('proto.botnet_p2p.Message.NATCheckMsg', null, global);
goog.exportSymbol('proto.botnet_p2p.Message.NATRequestMsg', null, global);
goog.exportSymbol('proto.botnet_p2p.Message.Status', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.botnet_p2p.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.botnet_p2p.Message.oneofGroups_);
};
goog.inherits(proto.botnet_p2p.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.botnet_p2p.Message.displayName = 'proto.botnet_p2p.Message';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.botnet_p2p.Message.oneofGroups_ = [[7,8,9,10,11,12,13,14]];

/**
 * @enum {number}
 */
proto.botnet_p2p.Message.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  COMMAND: 7,
  RESPONSE: 8,
  FILEREQUEST: 9,
  FILECHUNK: 10,
  NATREQUEST: 11,
  NATCHECK: 12,
  FINDNODE: 13,
  FOUNDNODES: 14
};

/**
 * @return {proto.botnet_p2p.Message.PayloadCase}
 */
proto.botnet_p2p.Message.prototype.getPayloadCase = function() {
  return /** @type {proto.botnet_p2p.Message.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.botnet_p2p.Message.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.botnet_p2p.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.botnet_p2p.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.botnet_p2p.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sender: (f = msg.getSender()) && proto.botnet_p2p.Message.Contact.toObject(includeInstance, f),
    receiver: (f = msg.getReceiver()) && proto.botnet_p2p.Message.Contact.toObject(includeInstance, f),
    propagation: jspb.Message.getFieldWithDefault(msg, 5, false),
    signature: msg.getSignature_asB64(),
    command: (f = msg.getCommand()) && proto.botnet_p2p.Message.CommandMsg.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.botnet_p2p.Message.CommandResponseMsg.toObject(includeInstance, f),
    filerequest: (f = msg.getFilerequest()) && proto.botnet_p2p.Message.FileRequestMsg.toObject(includeInstance, f),
    filechunk: (f = msg.getFilechunk()) && proto.botnet_p2p.Message.FileChunkMsg.toObject(includeInstance, f),
    natrequest: (f = msg.getNatrequest()) && proto.botnet_p2p.Message.NATRequestMsg.toObject(includeInstance, f),
    natcheck: (f = msg.getNatcheck()) && proto.botnet_p2p.Message.NATCheckMsg.toObject(includeInstance, f),
    findnode: (f = msg.getFindnode()) && proto.botnet_p2p.Message.FindNodeMsg.toObject(includeInstance, f),
    foundnodes: (f = msg.getFoundnodes()) && proto.botnet_p2p.Message.FoundNodesMsg.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.botnet_p2p.Message}
 */
proto.botnet_p2p.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.botnet_p2p.Message;
  return proto.botnet_p2p.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.botnet_p2p.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.botnet_p2p.Message}
 */
proto.botnet_p2p.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {!proto.botnet_p2p.Message.MessageType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.botnet_p2p.Message.Contact;
      reader.readMessage(value,proto.botnet_p2p.Message.Contact.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    case 4:
      var value = new proto.botnet_p2p.Message.Contact;
      reader.readMessage(value,proto.botnet_p2p.Message.Contact.deserializeBinaryFromReader);
      msg.setReceiver(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPropagation(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 7:
      var value = new proto.botnet_p2p.Message.CommandMsg;
      reader.readMessage(value,proto.botnet_p2p.Message.CommandMsg.deserializeBinaryFromReader);
      msg.setCommand(value);
      break;
    case 8:
      var value = new proto.botnet_p2p.Message.CommandResponseMsg;
      reader.readMessage(value,proto.botnet_p2p.Message.CommandResponseMsg.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 9:
      var value = new proto.botnet_p2p.Message.FileRequestMsg;
      reader.readMessage(value,proto.botnet_p2p.Message.FileRequestMsg.deserializeBinaryFromReader);
      msg.setFilerequest(value);
      break;
    case 10:
      var value = new proto.botnet_p2p.Message.FileChunkMsg;
      reader.readMessage(value,proto.botnet_p2p.Message.FileChunkMsg.deserializeBinaryFromReader);
      msg.setFilechunk(value);
      break;
    case 11:
      var value = new proto.botnet_p2p.Message.NATRequestMsg;
      reader.readMessage(value,proto.botnet_p2p.Message.NATRequestMsg.deserializeBinaryFromReader);
      msg.setNatrequest(value);
      break;
    case 12:
      var value = new proto.botnet_p2p.Message.NATCheckMsg;
      reader.readMessage(value,proto.botnet_p2p.Message.NATCheckMsg.deserializeBinaryFromReader);
      msg.setNatcheck(value);
      break;
    case 13:
      var value = new proto.botnet_p2p.Message.FindNodeMsg;
      reader.readMessage(value,proto.botnet_p2p.Message.FindNodeMsg.deserializeBinaryFromReader);
      msg.setFindnode(value);
      break;
    case 14:
      var value = new proto.botnet_p2p.Message.FoundNodesMsg;
      reader.readMessage(value,proto.botnet_p2p.Message.FoundNodesMsg.deserializeBinaryFromReader);
      msg.setFoundnodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.botnet_p2p.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.botnet_p2p.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.botnet_p2p.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSender();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.botnet_p2p.Message.Contact.serializeBinaryToWriter
    );
  }
  f = message.getReceiver();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.botnet_p2p.Message.Contact.serializeBinaryToWriter
    );
  }
  f = message.getPropagation();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getCommand();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.botnet_p2p.Message.CommandMsg.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.botnet_p2p.Message.CommandResponseMsg.serializeBinaryToWriter
    );
  }
  f = message.getFilerequest();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.botnet_p2p.Message.FileRequestMsg.serializeBinaryToWriter
    );
  }
  f = message.getFilechunk();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.botnet_p2p.Message.FileChunkMsg.serializeBinaryToWriter
    );
  }
  f = message.getNatrequest();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.botnet_p2p.Message.NATRequestMsg.serializeBinaryToWriter
    );
  }
  f = message.getNatcheck();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.botnet_p2p.Message.NATCheckMsg.serializeBinaryToWriter
    );
  }
  f = message.getFindnode();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.botnet_p2p.Message.FindNodeMsg.serializeBinaryToWriter
    );
  }
  f = message.getFoundnodes();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.botnet_p2p.Message.FoundNodesMsg.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.botnet_p2p.Message.MessageType = {
  UNDEFINED: 0,
  COMMAND: 1,
  COMMAND_RESPONSE: 2,
  FILE_REQUEST: 3,
  FILE_CHUNK: 4,
  NAT_REQUEST: 5,
  NAT_CHECK: 6,
  PING: 7,
  PING_RESPONSE: 8,
  LEAVE: 9,
  FIND_NODE: 10,
  FOUND_NODES: 11
};

/**
 * @enum {number}
 */
proto.botnet_p2p.Message.Status = {
  FAIL: 0,
  OK: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.botnet_p2p.Message.Contact = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.botnet_p2p.Message.Contact, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.botnet_p2p.Message.Contact.displayName = 'proto.botnet_p2p.Message.Contact';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.botnet_p2p.Message.Contact.prototype.toObject = function(opt_includeInstance) {
  return proto.botnet_p2p.Message.Contact.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.botnet_p2p.Message.Contact} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.Contact.toObject = function(includeInstance, msg) {
  var f, obj = {
    guid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ip: jspb.Message.getFieldWithDefault(msg, 2, ""),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isnat: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.botnet_p2p.Message.Contact}
 */
proto.botnet_p2p.Message.Contact.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.botnet_p2p.Message.Contact;
  return proto.botnet_p2p.Message.Contact.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.botnet_p2p.Message.Contact} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.botnet_p2p.Message.Contact}
 */
proto.botnet_p2p.Message.Contact.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsnat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.botnet_p2p.Message.Contact.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.botnet_p2p.Message.Contact.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.botnet_p2p.Message.Contact} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.Contact.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getIsnat();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string guid = 1;
 * @return {string}
 */
proto.botnet_p2p.Message.Contact.prototype.getGuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.botnet_p2p.Message.Contact.prototype.setGuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string IP = 2;
 * @return {string}
 */
proto.botnet_p2p.Message.Contact.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.botnet_p2p.Message.Contact.prototype.setIp = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 port = 3;
 * @return {number}
 */
proto.botnet_p2p.Message.Contact.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.botnet_p2p.Message.Contact.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool isNAT = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.botnet_p2p.Message.Contact.prototype.getIsnat = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.botnet_p2p.Message.Contact.prototype.setIsnat = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.botnet_p2p.Message.CommandMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.botnet_p2p.Message.CommandMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.botnet_p2p.Message.CommandMsg.displayName = 'proto.botnet_p2p.Message.CommandMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.botnet_p2p.Message.CommandMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.botnet_p2p.Message.CommandMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.botnet_p2p.Message.CommandMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.CommandMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: jspb.Message.getFieldWithDefault(msg, 1, ""),
    shouldrespond: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.botnet_p2p.Message.CommandMsg}
 */
proto.botnet_p2p.Message.CommandMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.botnet_p2p.Message.CommandMsg;
  return proto.botnet_p2p.Message.CommandMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.botnet_p2p.Message.CommandMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.botnet_p2p.Message.CommandMsg}
 */
proto.botnet_p2p.Message.CommandMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommand(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShouldrespond(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.botnet_p2p.Message.CommandMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.botnet_p2p.Message.CommandMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.botnet_p2p.Message.CommandMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.CommandMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommand();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShouldrespond();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string command = 1;
 * @return {string}
 */
proto.botnet_p2p.Message.CommandMsg.prototype.getCommand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.botnet_p2p.Message.CommandMsg.prototype.setCommand = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool shouldRespond = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.botnet_p2p.Message.CommandMsg.prototype.getShouldrespond = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.botnet_p2p.Message.CommandMsg.prototype.setShouldrespond = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.botnet_p2p.Message.CommandResponseMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.botnet_p2p.Message.CommandResponseMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.botnet_p2p.Message.CommandResponseMsg.displayName = 'proto.botnet_p2p.Message.CommandResponseMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.botnet_p2p.Message.CommandResponseMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.botnet_p2p.Message.CommandResponseMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.botnet_p2p.Message.CommandResponseMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.CommandResponseMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.botnet_p2p.Message.CommandResponseMsg}
 */
proto.botnet_p2p.Message.CommandResponseMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.botnet_p2p.Message.CommandResponseMsg;
  return proto.botnet_p2p.Message.CommandResponseMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.botnet_p2p.Message.CommandResponseMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.botnet_p2p.Message.CommandResponseMsg}
 */
proto.botnet_p2p.Message.CommandResponseMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {!proto.botnet_p2p.Message.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.botnet_p2p.Message.CommandResponseMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.botnet_p2p.Message.CommandResponseMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.botnet_p2p.Message.CommandResponseMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.CommandResponseMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.botnet_p2p.Message.CommandResponseMsg.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.botnet_p2p.Message.CommandResponseMsg.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.botnet_p2p.Message.Status}
 */
proto.botnet_p2p.Message.CommandResponseMsg.prototype.getStatus = function() {
  return /** @type {!proto.botnet_p2p.Message.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.botnet_p2p.Message.Status} value */
proto.botnet_p2p.Message.CommandResponseMsg.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.botnet_p2p.Message.FileRequestMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.botnet_p2p.Message.FileRequestMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.botnet_p2p.Message.FileRequestMsg.displayName = 'proto.botnet_p2p.Message.FileRequestMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.botnet_p2p.Message.FileRequestMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.botnet_p2p.Message.FileRequestMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.botnet_p2p.Message.FileRequestMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.FileRequestMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.botnet_p2p.Message.FileRequestMsg}
 */
proto.botnet_p2p.Message.FileRequestMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.botnet_p2p.Message.FileRequestMsg;
  return proto.botnet_p2p.Message.FileRequestMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.botnet_p2p.Message.FileRequestMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.botnet_p2p.Message.FileRequestMsg}
 */
proto.botnet_p2p.Message.FileRequestMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.botnet_p2p.Message.FileRequestMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.botnet_p2p.Message.FileRequestMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.botnet_p2p.Message.FileRequestMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.FileRequestMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.botnet_p2p.Message.FileRequestMsg.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.botnet_p2p.Message.FileRequestMsg.prototype.setPath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.botnet_p2p.Message.FileChunkMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.botnet_p2p.Message.FileChunkMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.botnet_p2p.Message.FileChunkMsg.displayName = 'proto.botnet_p2p.Message.FileChunkMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.botnet_p2p.Message.FileChunkMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.botnet_p2p.Message.FileChunkMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.botnet_p2p.Message.FileChunkMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.FileChunkMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    filename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    filesize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ordinal: jspb.Message.getFieldWithDefault(msg, 4, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.botnet_p2p.Message.FileChunkMsg}
 */
proto.botnet_p2p.Message.FileChunkMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.botnet_p2p.Message.FileChunkMsg;
  return proto.botnet_p2p.Message.FileChunkMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.botnet_p2p.Message.FileChunkMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.botnet_p2p.Message.FileChunkMsg}
 */
proto.botnet_p2p.Message.FileChunkMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFilesize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOrdinal(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.botnet_p2p.Message.FileChunkMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.botnet_p2p.Message.FileChunkMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.botnet_p2p.Message.FileChunkMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.FileChunkMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFilesize();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getOrdinal();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.botnet_p2p.Message.FileChunkMsg.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.botnet_p2p.Message.FileChunkMsg.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string fileName = 2;
 * @return {string}
 */
proto.botnet_p2p.Message.FileChunkMsg.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.botnet_p2p.Message.FileChunkMsg.prototype.setFilename = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 fileSize = 3;
 * @return {number}
 */
proto.botnet_p2p.Message.FileChunkMsg.prototype.getFilesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.botnet_p2p.Message.FileChunkMsg.prototype.setFilesize = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 ordinal = 4;
 * @return {number}
 */
proto.botnet_p2p.Message.FileChunkMsg.prototype.getOrdinal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.botnet_p2p.Message.FileChunkMsg.prototype.setOrdinal = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes data = 5;
 * @return {!(string|Uint8Array)}
 */
proto.botnet_p2p.Message.FileChunkMsg.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes data = 5;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.botnet_p2p.Message.FileChunkMsg.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.botnet_p2p.Message.FileChunkMsg.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.botnet_p2p.Message.FileChunkMsg.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.botnet_p2p.Message.NATRequestMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.botnet_p2p.Message.NATRequestMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.botnet_p2p.Message.NATRequestMsg.displayName = 'proto.botnet_p2p.Message.NATRequestMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.botnet_p2p.Message.NATRequestMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.botnet_p2p.Message.NATRequestMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.botnet_p2p.Message.NATRequestMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.NATRequestMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    guid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.botnet_p2p.Message.NATRequestMsg}
 */
proto.botnet_p2p.Message.NATRequestMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.botnet_p2p.Message.NATRequestMsg;
  return proto.botnet_p2p.Message.NATRequestMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.botnet_p2p.Message.NATRequestMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.botnet_p2p.Message.NATRequestMsg}
 */
proto.botnet_p2p.Message.NATRequestMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.botnet_p2p.Message.NATRequestMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.botnet_p2p.Message.NATRequestMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.botnet_p2p.Message.NATRequestMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.NATRequestMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string guid = 1;
 * @return {string}
 */
proto.botnet_p2p.Message.NATRequestMsg.prototype.getGuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.botnet_p2p.Message.NATRequestMsg.prototype.setGuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.botnet_p2p.Message.NATCheckMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.botnet_p2p.Message.NATCheckMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.botnet_p2p.Message.NATCheckMsg.displayName = 'proto.botnet_p2p.Message.NATCheckMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.botnet_p2p.Message.NATCheckMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.botnet_p2p.Message.NATCheckMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.botnet_p2p.Message.NATCheckMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.NATCheckMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    guid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.botnet_p2p.Message.NATCheckMsg}
 */
proto.botnet_p2p.Message.NATCheckMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.botnet_p2p.Message.NATCheckMsg;
  return proto.botnet_p2p.Message.NATCheckMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.botnet_p2p.Message.NATCheckMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.botnet_p2p.Message.NATCheckMsg}
 */
proto.botnet_p2p.Message.NATCheckMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.botnet_p2p.Message.NATCheckMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.botnet_p2p.Message.NATCheckMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.botnet_p2p.Message.NATCheckMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.NATCheckMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string guid = 1;
 * @return {string}
 */
proto.botnet_p2p.Message.NATCheckMsg.prototype.getGuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.botnet_p2p.Message.NATCheckMsg.prototype.setGuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.botnet_p2p.Message.FindNodeMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.botnet_p2p.Message.FindNodeMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.botnet_p2p.Message.FindNodeMsg.displayName = 'proto.botnet_p2p.Message.FindNodeMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.botnet_p2p.Message.FindNodeMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.botnet_p2p.Message.FindNodeMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.botnet_p2p.Message.FindNodeMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.FindNodeMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    guid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.botnet_p2p.Message.FindNodeMsg}
 */
proto.botnet_p2p.Message.FindNodeMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.botnet_p2p.Message.FindNodeMsg;
  return proto.botnet_p2p.Message.FindNodeMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.botnet_p2p.Message.FindNodeMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.botnet_p2p.Message.FindNodeMsg}
 */
proto.botnet_p2p.Message.FindNodeMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.botnet_p2p.Message.FindNodeMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.botnet_p2p.Message.FindNodeMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.botnet_p2p.Message.FindNodeMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.FindNodeMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string guid = 1;
 * @return {string}
 */
proto.botnet_p2p.Message.FindNodeMsg.prototype.getGuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.botnet_p2p.Message.FindNodeMsg.prototype.setGuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.botnet_p2p.Message.FoundNodesMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.botnet_p2p.Message.FoundNodesMsg.repeatedFields_, null);
};
goog.inherits(proto.botnet_p2p.Message.FoundNodesMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.botnet_p2p.Message.FoundNodesMsg.displayName = 'proto.botnet_p2p.Message.FoundNodesMsg';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.botnet_p2p.Message.FoundNodesMsg.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.botnet_p2p.Message.FoundNodesMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.botnet_p2p.Message.FoundNodesMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.botnet_p2p.Message.FoundNodesMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.FoundNodesMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.botnet_p2p.Message.Contact.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.botnet_p2p.Message.FoundNodesMsg}
 */
proto.botnet_p2p.Message.FoundNodesMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.botnet_p2p.Message.FoundNodesMsg;
  return proto.botnet_p2p.Message.FoundNodesMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.botnet_p2p.Message.FoundNodesMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.botnet_p2p.Message.FoundNodesMsg}
 */
proto.botnet_p2p.Message.FoundNodesMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.botnet_p2p.Message.Contact;
      reader.readMessage(value,proto.botnet_p2p.Message.Contact.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.botnet_p2p.Message.FoundNodesMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.botnet_p2p.Message.FoundNodesMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.botnet_p2p.Message.FoundNodesMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.FoundNodesMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.botnet_p2p.Message.Contact.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Contact nodes = 1;
 * @return {!Array.<!proto.botnet_p2p.Message.Contact>}
 */
proto.botnet_p2p.Message.FoundNodesMsg.prototype.getNodesList = function() {
  return /** @type{!Array.<!proto.botnet_p2p.Message.Contact>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.botnet_p2p.Message.Contact, 1));
};


/** @param {!Array.<!proto.botnet_p2p.Message.Contact>} value */
proto.botnet_p2p.Message.FoundNodesMsg.prototype.setNodesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.botnet_p2p.Message.Contact=} opt_value
 * @param {number=} opt_index
 * @return {!proto.botnet_p2p.Message.Contact}
 */
proto.botnet_p2p.Message.FoundNodesMsg.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.botnet_p2p.Message.Contact, opt_index);
};


proto.botnet_p2p.Message.FoundNodesMsg.prototype.clearNodesList = function() {
  this.setNodesList([]);
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.botnet_p2p.Message.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.botnet_p2p.Message.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional MessageType type = 2;
 * @return {!proto.botnet_p2p.Message.MessageType}
 */
proto.botnet_p2p.Message.prototype.getType = function() {
  return /** @type {!proto.botnet_p2p.Message.MessageType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.botnet_p2p.Message.MessageType} value */
proto.botnet_p2p.Message.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Contact sender = 3;
 * @return {?proto.botnet_p2p.Message.Contact}
 */
proto.botnet_p2p.Message.prototype.getSender = function() {
  return /** @type{?proto.botnet_p2p.Message.Contact} */ (
    jspb.Message.getWrapperField(this, proto.botnet_p2p.Message.Contact, 3));
};


/** @param {?proto.botnet_p2p.Message.Contact|undefined} value */
proto.botnet_p2p.Message.prototype.setSender = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.botnet_p2p.Message.prototype.clearSender = function() {
  this.setSender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.botnet_p2p.Message.prototype.hasSender = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Contact receiver = 4;
 * @return {?proto.botnet_p2p.Message.Contact}
 */
proto.botnet_p2p.Message.prototype.getReceiver = function() {
  return /** @type{?proto.botnet_p2p.Message.Contact} */ (
    jspb.Message.getWrapperField(this, proto.botnet_p2p.Message.Contact, 4));
};


/** @param {?proto.botnet_p2p.Message.Contact|undefined} value */
proto.botnet_p2p.Message.prototype.setReceiver = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.botnet_p2p.Message.prototype.clearReceiver = function() {
  this.setReceiver(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.botnet_p2p.Message.prototype.hasReceiver = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool propagation = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.botnet_p2p.Message.prototype.getPropagation = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.botnet_p2p.Message.prototype.setPropagation = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bytes signature = 6;
 * @return {!(string|Uint8Array)}
 */
proto.botnet_p2p.Message.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes signature = 6;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.botnet_p2p.Message.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.botnet_p2p.Message.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.botnet_p2p.Message.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional CommandMsg command = 7;
 * @return {?proto.botnet_p2p.Message.CommandMsg}
 */
proto.botnet_p2p.Message.prototype.getCommand = function() {
  return /** @type{?proto.botnet_p2p.Message.CommandMsg} */ (
    jspb.Message.getWrapperField(this, proto.botnet_p2p.Message.CommandMsg, 7));
};


/** @param {?proto.botnet_p2p.Message.CommandMsg|undefined} value */
proto.botnet_p2p.Message.prototype.setCommand = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.botnet_p2p.Message.oneofGroups_[0], value);
};


proto.botnet_p2p.Message.prototype.clearCommand = function() {
  this.setCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.botnet_p2p.Message.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional CommandResponseMsg response = 8;
 * @return {?proto.botnet_p2p.Message.CommandResponseMsg}
 */
proto.botnet_p2p.Message.prototype.getResponse = function() {
  return /** @type{?proto.botnet_p2p.Message.CommandResponseMsg} */ (
    jspb.Message.getWrapperField(this, proto.botnet_p2p.Message.CommandResponseMsg, 8));
};


/** @param {?proto.botnet_p2p.Message.CommandResponseMsg|undefined} value */
proto.botnet_p2p.Message.prototype.setResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.botnet_p2p.Message.oneofGroups_[0], value);
};


proto.botnet_p2p.Message.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.botnet_p2p.Message.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional FileRequestMsg fileRequest = 9;
 * @return {?proto.botnet_p2p.Message.FileRequestMsg}
 */
proto.botnet_p2p.Message.prototype.getFilerequest = function() {
  return /** @type{?proto.botnet_p2p.Message.FileRequestMsg} */ (
    jspb.Message.getWrapperField(this, proto.botnet_p2p.Message.FileRequestMsg, 9));
};


/** @param {?proto.botnet_p2p.Message.FileRequestMsg|undefined} value */
proto.botnet_p2p.Message.prototype.setFilerequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.botnet_p2p.Message.oneofGroups_[0], value);
};


proto.botnet_p2p.Message.prototype.clearFilerequest = function() {
  this.setFilerequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.botnet_p2p.Message.prototype.hasFilerequest = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional FileChunkMsg fileChunk = 10;
 * @return {?proto.botnet_p2p.Message.FileChunkMsg}
 */
proto.botnet_p2p.Message.prototype.getFilechunk = function() {
  return /** @type{?proto.botnet_p2p.Message.FileChunkMsg} */ (
    jspb.Message.getWrapperField(this, proto.botnet_p2p.Message.FileChunkMsg, 10));
};


/** @param {?proto.botnet_p2p.Message.FileChunkMsg|undefined} value */
proto.botnet_p2p.Message.prototype.setFilechunk = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.botnet_p2p.Message.oneofGroups_[0], value);
};


proto.botnet_p2p.Message.prototype.clearFilechunk = function() {
  this.setFilechunk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.botnet_p2p.Message.prototype.hasFilechunk = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional NATRequestMsg NATRequest = 11;
 * @return {?proto.botnet_p2p.Message.NATRequestMsg}
 */
proto.botnet_p2p.Message.prototype.getNatrequest = function() {
  return /** @type{?proto.botnet_p2p.Message.NATRequestMsg} */ (
    jspb.Message.getWrapperField(this, proto.botnet_p2p.Message.NATRequestMsg, 11));
};


/** @param {?proto.botnet_p2p.Message.NATRequestMsg|undefined} value */
proto.botnet_p2p.Message.prototype.setNatrequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.botnet_p2p.Message.oneofGroups_[0], value);
};


proto.botnet_p2p.Message.prototype.clearNatrequest = function() {
  this.setNatrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.botnet_p2p.Message.prototype.hasNatrequest = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional NATCheckMsg NATCheck = 12;
 * @return {?proto.botnet_p2p.Message.NATCheckMsg}
 */
proto.botnet_p2p.Message.prototype.getNatcheck = function() {
  return /** @type{?proto.botnet_p2p.Message.NATCheckMsg} */ (
    jspb.Message.getWrapperField(this, proto.botnet_p2p.Message.NATCheckMsg, 12));
};


/** @param {?proto.botnet_p2p.Message.NATCheckMsg|undefined} value */
proto.botnet_p2p.Message.prototype.setNatcheck = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.botnet_p2p.Message.oneofGroups_[0], value);
};


proto.botnet_p2p.Message.prototype.clearNatcheck = function() {
  this.setNatcheck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.botnet_p2p.Message.prototype.hasNatcheck = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional FindNodeMsg findNode = 13;
 * @return {?proto.botnet_p2p.Message.FindNodeMsg}
 */
proto.botnet_p2p.Message.prototype.getFindnode = function() {
  return /** @type{?proto.botnet_p2p.Message.FindNodeMsg} */ (
    jspb.Message.getWrapperField(this, proto.botnet_p2p.Message.FindNodeMsg, 13));
};


/** @param {?proto.botnet_p2p.Message.FindNodeMsg|undefined} value */
proto.botnet_p2p.Message.prototype.setFindnode = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.botnet_p2p.Message.oneofGroups_[0], value);
};


proto.botnet_p2p.Message.prototype.clearFindnode = function() {
  this.setFindnode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.botnet_p2p.Message.prototype.hasFindnode = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional FoundNodesMsg foundNodes = 14;
 * @return {?proto.botnet_p2p.Message.FoundNodesMsg}
 */
proto.botnet_p2p.Message.prototype.getFoundnodes = function() {
  return /** @type{?proto.botnet_p2p.Message.FoundNodesMsg} */ (
    jspb.Message.getWrapperField(this, proto.botnet_p2p.Message.FoundNodesMsg, 14));
};


/** @param {?proto.botnet_p2p.Message.FoundNodesMsg|undefined} value */
proto.botnet_p2p.Message.prototype.setFoundnodes = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.botnet_p2p.Message.oneofGroups_[0], value);
};


proto.botnet_p2p.Message.prototype.clearFoundnodes = function() {
  this.setFoundnodes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.botnet_p2p.Message.prototype.hasFoundnodes = function() {
  return jspb.Message.getField(this, 14) != null;
};


goog.object.extend(exports, proto.botnet_p2p);
