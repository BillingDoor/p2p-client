/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.botnet_p2p.Message', null, global);
goog.exportSymbol('proto.botnet_p2p.Message.Command', null, global);
goog.exportSymbol('proto.botnet_p2p.Message.FileChunk', null, global);
goog.exportSymbol('proto.botnet_p2p.Message.FindNode', null, global);
goog.exportSymbol('proto.botnet_p2p.Message.FindValue', null, global);
goog.exportSymbol('proto.botnet_p2p.Message.FoundNodes', null, global);
goog.exportSymbol('proto.botnet_p2p.Message.Leave', null, global);
goog.exportSymbol('proto.botnet_p2p.Message.MessageType', null, global);
goog.exportSymbol('proto.botnet_p2p.Message.NATCheck', null, global);
goog.exportSymbol('proto.botnet_p2p.Message.NATRequest', null, global);
goog.exportSymbol('proto.botnet_p2p.Message.NodeDescription', null, global);
goog.exportSymbol('proto.botnet_p2p.Message.Response', null, global);
goog.exportSymbol('proto.botnet_p2p.Message.Status', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.botnet_p2p.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.botnet_p2p.Message.oneofGroups_);
};
goog.inherits(proto.botnet_p2p.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.botnet_p2p.Message.displayName = 'proto.botnet_p2p.Message';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.botnet_p2p.Message.oneofGroups_ = [[7,8,9,10,11,12,13,14,15]];

/**
 * @enum {number}
 */
proto.botnet_p2p.Message.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  PCOMMAND: 7,
  PRESPONSE: 8,
  PFILE: 9,
  PNATREQUEST: 10,
  PNATCHECK: 11,
  PLEAVE: 12,
  PFINDNODE: 13,
  PFOUNDNODES: 14,
  PFINDVALUE: 15
};

/**
 * @return {proto.botnet_p2p.Message.PayloadCase}
 */
proto.botnet_p2p.Message.prototype.getPayloadCase = function() {
  return /** @type {proto.botnet_p2p.Message.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.botnet_p2p.Message.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.botnet_p2p.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.botnet_p2p.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.botnet_p2p.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sender: jspb.Message.getFieldWithDefault(msg, 3, ""),
    receiver: jspb.Message.getFieldWithDefault(msg, 4, ""),
    propagation: jspb.Message.getFieldWithDefault(msg, 5, false),
    signature: msg.getSignature_asB64(),
    pcommand: (f = msg.getPcommand()) && proto.botnet_p2p.Message.Command.toObject(includeInstance, f),
    presponse: (f = msg.getPresponse()) && proto.botnet_p2p.Message.Response.toObject(includeInstance, f),
    pfile: (f = msg.getPfile()) && proto.botnet_p2p.Message.FileChunk.toObject(includeInstance, f),
    pnatrequest: (f = msg.getPnatrequest()) && proto.botnet_p2p.Message.NATRequest.toObject(includeInstance, f),
    pnatcheck: (f = msg.getPnatcheck()) && proto.botnet_p2p.Message.NATCheck.toObject(includeInstance, f),
    pleave: (f = msg.getPleave()) && proto.botnet_p2p.Message.Leave.toObject(includeInstance, f),
    pfindnode: (f = msg.getPfindnode()) && proto.botnet_p2p.Message.FindNode.toObject(includeInstance, f),
    pfoundnodes: (f = msg.getPfoundnodes()) && proto.botnet_p2p.Message.FoundNodes.toObject(includeInstance, f),
    pfindvalue: (f = msg.getPfindvalue()) && proto.botnet_p2p.Message.FindValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.botnet_p2p.Message}
 */
proto.botnet_p2p.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.botnet_p2p.Message;
  return proto.botnet_p2p.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.botnet_p2p.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.botnet_p2p.Message}
 */
proto.botnet_p2p.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {!proto.botnet_p2p.Message.MessageType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiver(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPropagation(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 7:
      var value = new proto.botnet_p2p.Message.Command;
      reader.readMessage(value,proto.botnet_p2p.Message.Command.deserializeBinaryFromReader);
      msg.setPcommand(value);
      break;
    case 8:
      var value = new proto.botnet_p2p.Message.Response;
      reader.readMessage(value,proto.botnet_p2p.Message.Response.deserializeBinaryFromReader);
      msg.setPresponse(value);
      break;
    case 9:
      var value = new proto.botnet_p2p.Message.FileChunk;
      reader.readMessage(value,proto.botnet_p2p.Message.FileChunk.deserializeBinaryFromReader);
      msg.setPfile(value);
      break;
    case 10:
      var value = new proto.botnet_p2p.Message.NATRequest;
      reader.readMessage(value,proto.botnet_p2p.Message.NATRequest.deserializeBinaryFromReader);
      msg.setPnatrequest(value);
      break;
    case 11:
      var value = new proto.botnet_p2p.Message.NATCheck;
      reader.readMessage(value,proto.botnet_p2p.Message.NATCheck.deserializeBinaryFromReader);
      msg.setPnatcheck(value);
      break;
    case 12:
      var value = new proto.botnet_p2p.Message.Leave;
      reader.readMessage(value,proto.botnet_p2p.Message.Leave.deserializeBinaryFromReader);
      msg.setPleave(value);
      break;
    case 13:
      var value = new proto.botnet_p2p.Message.FindNode;
      reader.readMessage(value,proto.botnet_p2p.Message.FindNode.deserializeBinaryFromReader);
      msg.setPfindnode(value);
      break;
    case 14:
      var value = new proto.botnet_p2p.Message.FoundNodes;
      reader.readMessage(value,proto.botnet_p2p.Message.FoundNodes.deserializeBinaryFromReader);
      msg.setPfoundnodes(value);
      break;
    case 15:
      var value = new proto.botnet_p2p.Message.FindValue;
      reader.readMessage(value,proto.botnet_p2p.Message.FindValue.deserializeBinaryFromReader);
      msg.setPfindvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.botnet_p2p.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.botnet_p2p.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.botnet_p2p.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getReceiver();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPropagation();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getPcommand();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.botnet_p2p.Message.Command.serializeBinaryToWriter
    );
  }
  f = message.getPresponse();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.botnet_p2p.Message.Response.serializeBinaryToWriter
    );
  }
  f = message.getPfile();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.botnet_p2p.Message.FileChunk.serializeBinaryToWriter
    );
  }
  f = message.getPnatrequest();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.botnet_p2p.Message.NATRequest.serializeBinaryToWriter
    );
  }
  f = message.getPnatcheck();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.botnet_p2p.Message.NATCheck.serializeBinaryToWriter
    );
  }
  f = message.getPleave();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.botnet_p2p.Message.Leave.serializeBinaryToWriter
    );
  }
  f = message.getPfindnode();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.botnet_p2p.Message.FindNode.serializeBinaryToWriter
    );
  }
  f = message.getPfoundnodes();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.botnet_p2p.Message.FoundNodes.serializeBinaryToWriter
    );
  }
  f = message.getPfindvalue();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.botnet_p2p.Message.FindValue.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.botnet_p2p.Message.MessageType = {
  UNDEFINED: 0,
  COMMAND: 1,
  RESPONSE: 2,
  FILE_CHUNK: 3,
  NAT_REQUEST: 4,
  NAT_CHECK: 5,
  PING: 6,
  LEAVE: 7,
  FIND_NODE: 8,
  FOUND_NODES: 9,
  FIND_VALUE: 10
};

/**
 * @enum {number}
 */
proto.botnet_p2p.Message.Status = {
  FAIL: 0,
  OK: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.botnet_p2p.Message.NodeDescription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.botnet_p2p.Message.NodeDescription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.botnet_p2p.Message.NodeDescription.displayName = 'proto.botnet_p2p.Message.NodeDescription';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.botnet_p2p.Message.NodeDescription.prototype.toObject = function(opt_includeInstance) {
  return proto.botnet_p2p.Message.NodeDescription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.botnet_p2p.Message.NodeDescription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.NodeDescription.toObject = function(includeInstance, msg) {
  var f, obj = {
    guid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ip: jspb.Message.getFieldWithDefault(msg, 2, ""),
    port: jspb.Message.getFieldWithDefault(msg, 3, ""),
    isnat: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.botnet_p2p.Message.NodeDescription}
 */
proto.botnet_p2p.Message.NodeDescription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.botnet_p2p.Message.NodeDescription;
  return proto.botnet_p2p.Message.NodeDescription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.botnet_p2p.Message.NodeDescription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.botnet_p2p.Message.NodeDescription}
 */
proto.botnet_p2p.Message.NodeDescription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPort(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsnat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.botnet_p2p.Message.NodeDescription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.botnet_p2p.Message.NodeDescription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.botnet_p2p.Message.NodeDescription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.NodeDescription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPort();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIsnat();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional uint64 guid = 1;
 * @return {number}
 */
proto.botnet_p2p.Message.NodeDescription.prototype.getGuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.botnet_p2p.Message.NodeDescription.prototype.setGuid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string IP = 2;
 * @return {string}
 */
proto.botnet_p2p.Message.NodeDescription.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.botnet_p2p.Message.NodeDescription.prototype.setIp = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Port = 3;
 * @return {string}
 */
proto.botnet_p2p.Message.NodeDescription.prototype.getPort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.botnet_p2p.Message.NodeDescription.prototype.setPort = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool isNAT = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.botnet_p2p.Message.NodeDescription.prototype.getIsnat = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.botnet_p2p.Message.NodeDescription.prototype.setIsnat = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.botnet_p2p.Message.Command = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.botnet_p2p.Message.Command, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.botnet_p2p.Message.Command.displayName = 'proto.botnet_p2p.Message.Command';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.botnet_p2p.Message.Command.prototype.toObject = function(opt_includeInstance) {
  return proto.botnet_p2p.Message.Command.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.botnet_p2p.Message.Command} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.Command.toObject = function(includeInstance, msg) {
  var f, obj = {
    commandstring: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sendresponse: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.botnet_p2p.Message.Command}
 */
proto.botnet_p2p.Message.Command.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.botnet_p2p.Message.Command;
  return proto.botnet_p2p.Message.Command.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.botnet_p2p.Message.Command} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.botnet_p2p.Message.Command}
 */
proto.botnet_p2p.Message.Command.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommandstring(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.botnet_p2p.Message.Command.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.botnet_p2p.Message.Command.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.botnet_p2p.Message.Command} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.Command.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommandstring();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSendresponse();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string commandString = 1;
 * @return {string}
 */
proto.botnet_p2p.Message.Command.prototype.getCommandstring = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.botnet_p2p.Message.Command.prototype.setCommandstring = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool sendResponse = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.botnet_p2p.Message.Command.prototype.getSendresponse = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.botnet_p2p.Message.Command.prototype.setSendresponse = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.botnet_p2p.Message.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.botnet_p2p.Message.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.botnet_p2p.Message.Response.displayName = 'proto.botnet_p2p.Message.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.botnet_p2p.Message.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.botnet_p2p.Message.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.botnet_p2p.Message.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.botnet_p2p.Message.Response}
 */
proto.botnet_p2p.Message.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.botnet_p2p.Message.Response;
  return proto.botnet_p2p.Message.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.botnet_p2p.Message.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.botnet_p2p.Message.Response}
 */
proto.botnet_p2p.Message.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {!proto.botnet_p2p.Message.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.botnet_p2p.Message.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.botnet_p2p.Message.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.botnet_p2p.Message.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.botnet_p2p.Message.Response.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.botnet_p2p.Message.Response.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.botnet_p2p.Message.Status}
 */
proto.botnet_p2p.Message.Response.prototype.getStatus = function() {
  return /** @type {!proto.botnet_p2p.Message.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.botnet_p2p.Message.Status} value */
proto.botnet_p2p.Message.Response.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.botnet_p2p.Message.FileChunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.botnet_p2p.Message.FileChunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.botnet_p2p.Message.FileChunk.displayName = 'proto.botnet_p2p.Message.FileChunk';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.botnet_p2p.Message.FileChunk.prototype.toObject = function(opt_includeInstance) {
  return proto.botnet_p2p.Message.FileChunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.botnet_p2p.Message.FileChunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.FileChunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, false),
    chunknumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    allchunks: jspb.Message.getFieldWithDefault(msg, 4, 0),
    chunksize: jspb.Message.getFieldWithDefault(msg, 5, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.botnet_p2p.Message.FileChunk}
 */
proto.botnet_p2p.Message.FileChunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.botnet_p2p.Message.FileChunk;
  return proto.botnet_p2p.Message.FileChunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.botnet_p2p.Message.FileChunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.botnet_p2p.Message.FileChunk}
 */
proto.botnet_p2p.Message.FileChunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChunknumber(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAllchunks(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChunksize(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.botnet_p2p.Message.FileChunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.botnet_p2p.Message.FileChunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.botnet_p2p.Message.FileChunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.FileChunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getChunknumber();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getAllchunks();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getChunksize();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.botnet_p2p.Message.FileChunk.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.botnet_p2p.Message.FileChunk.prototype.setPath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool name = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.botnet_p2p.Message.FileChunk.prototype.getName = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.botnet_p2p.Message.FileChunk.prototype.setName = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional uint32 chunkNumber = 3;
 * @return {number}
 */
proto.botnet_p2p.Message.FileChunk.prototype.getChunknumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.botnet_p2p.Message.FileChunk.prototype.setChunknumber = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 allChunks = 4;
 * @return {number}
 */
proto.botnet_p2p.Message.FileChunk.prototype.getAllchunks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.botnet_p2p.Message.FileChunk.prototype.setAllchunks = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 chunkSize = 5;
 * @return {number}
 */
proto.botnet_p2p.Message.FileChunk.prototype.getChunksize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.botnet_p2p.Message.FileChunk.prototype.setChunksize = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.botnet_p2p.Message.FileChunk.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes data = 6;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.botnet_p2p.Message.FileChunk.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.botnet_p2p.Message.FileChunk.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.botnet_p2p.Message.FileChunk.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.botnet_p2p.Message.NATRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.botnet_p2p.Message.NATRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.botnet_p2p.Message.NATRequest.displayName = 'proto.botnet_p2p.Message.NATRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.botnet_p2p.Message.NATRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.botnet_p2p.Message.NATRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.botnet_p2p.Message.NATRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.NATRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.botnet_p2p.Message.NATRequest}
 */
proto.botnet_p2p.Message.NATRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.botnet_p2p.Message.NATRequest;
  return proto.botnet_p2p.Message.NATRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.botnet_p2p.Message.NATRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.botnet_p2p.Message.NATRequest}
 */
proto.botnet_p2p.Message.NATRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.botnet_p2p.Message.NATRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.botnet_p2p.Message.NATRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.botnet_p2p.Message.NATRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.NATRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 target = 1;
 * @return {number}
 */
proto.botnet_p2p.Message.NATRequest.prototype.getTarget = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.botnet_p2p.Message.NATRequest.prototype.setTarget = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.botnet_p2p.Message.NATCheck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.botnet_p2p.Message.NATCheck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.botnet_p2p.Message.NATCheck.displayName = 'proto.botnet_p2p.Message.NATCheck';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.botnet_p2p.Message.NATCheck.prototype.toObject = function(opt_includeInstance) {
  return proto.botnet_p2p.Message.NATCheck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.botnet_p2p.Message.NATCheck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.NATCheck.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.botnet_p2p.Message.NATCheck}
 */
proto.botnet_p2p.Message.NATCheck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.botnet_p2p.Message.NATCheck;
  return proto.botnet_p2p.Message.NATCheck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.botnet_p2p.Message.NATCheck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.botnet_p2p.Message.NATCheck}
 */
proto.botnet_p2p.Message.NATCheck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.botnet_p2p.Message.NATCheck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.botnet_p2p.Message.NATCheck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.botnet_p2p.Message.NATCheck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.NATCheck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 source = 1;
 * @return {number}
 */
proto.botnet_p2p.Message.NATCheck.prototype.getSource = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.botnet_p2p.Message.NATCheck.prototype.setSource = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.botnet_p2p.Message.FindValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.botnet_p2p.Message.FindValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.botnet_p2p.Message.FindValue.displayName = 'proto.botnet_p2p.Message.FindValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.botnet_p2p.Message.FindValue.prototype.toObject = function(opt_includeInstance) {
  return proto.botnet_p2p.Message.FindValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.botnet_p2p.Message.FindValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.FindValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    guid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.botnet_p2p.Message.FindValue}
 */
proto.botnet_p2p.Message.FindValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.botnet_p2p.Message.FindValue;
  return proto.botnet_p2p.Message.FindValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.botnet_p2p.Message.FindValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.botnet_p2p.Message.FindValue}
 */
proto.botnet_p2p.Message.FindValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.botnet_p2p.Message.FindValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.botnet_p2p.Message.FindValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.botnet_p2p.Message.FindValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.FindValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 guid = 1;
 * @return {number}
 */
proto.botnet_p2p.Message.FindValue.prototype.getGuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.botnet_p2p.Message.FindValue.prototype.setGuid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.botnet_p2p.Message.Leave = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.botnet_p2p.Message.Leave, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.botnet_p2p.Message.Leave.displayName = 'proto.botnet_p2p.Message.Leave';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.botnet_p2p.Message.Leave.prototype.toObject = function(opt_includeInstance) {
  return proto.botnet_p2p.Message.Leave.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.botnet_p2p.Message.Leave} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.Leave.toObject = function(includeInstance, msg) {
  var f, obj = {
    guid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.botnet_p2p.Message.Leave}
 */
proto.botnet_p2p.Message.Leave.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.botnet_p2p.Message.Leave;
  return proto.botnet_p2p.Message.Leave.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.botnet_p2p.Message.Leave} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.botnet_p2p.Message.Leave}
 */
proto.botnet_p2p.Message.Leave.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.botnet_p2p.Message.Leave.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.botnet_p2p.Message.Leave.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.botnet_p2p.Message.Leave} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.Leave.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 guid = 1;
 * @return {number}
 */
proto.botnet_p2p.Message.Leave.prototype.getGuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.botnet_p2p.Message.Leave.prototype.setGuid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.botnet_p2p.Message.FindNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.botnet_p2p.Message.FindNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.botnet_p2p.Message.FindNode.displayName = 'proto.botnet_p2p.Message.FindNode';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.botnet_p2p.Message.FindNode.prototype.toObject = function(opt_includeInstance) {
  return proto.botnet_p2p.Message.FindNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.botnet_p2p.Message.FindNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.FindNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    guid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.botnet_p2p.Message.FindNode}
 */
proto.botnet_p2p.Message.FindNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.botnet_p2p.Message.FindNode;
  return proto.botnet_p2p.Message.FindNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.botnet_p2p.Message.FindNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.botnet_p2p.Message.FindNode}
 */
proto.botnet_p2p.Message.FindNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.botnet_p2p.Message.FindNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.botnet_p2p.Message.FindNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.botnet_p2p.Message.FindNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.FindNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 guid = 1;
 * @return {number}
 */
proto.botnet_p2p.Message.FindNode.prototype.getGuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.botnet_p2p.Message.FindNode.prototype.setGuid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.botnet_p2p.Message.FoundNodes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.botnet_p2p.Message.FoundNodes.repeatedFields_, null);
};
goog.inherits(proto.botnet_p2p.Message.FoundNodes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.botnet_p2p.Message.FoundNodes.displayName = 'proto.botnet_p2p.Message.FoundNodes';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.botnet_p2p.Message.FoundNodes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.botnet_p2p.Message.FoundNodes.prototype.toObject = function(opt_includeInstance) {
  return proto.botnet_p2p.Message.FoundNodes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.botnet_p2p.Message.FoundNodes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.FoundNodes.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.botnet_p2p.Message.NodeDescription.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.botnet_p2p.Message.FoundNodes}
 */
proto.botnet_p2p.Message.FoundNodes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.botnet_p2p.Message.FoundNodes;
  return proto.botnet_p2p.Message.FoundNodes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.botnet_p2p.Message.FoundNodes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.botnet_p2p.Message.FoundNodes}
 */
proto.botnet_p2p.Message.FoundNodes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.botnet_p2p.Message.NodeDescription;
      reader.readMessage(value,proto.botnet_p2p.Message.NodeDescription.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.botnet_p2p.Message.FoundNodes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.botnet_p2p.Message.FoundNodes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.botnet_p2p.Message.FoundNodes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.botnet_p2p.Message.FoundNodes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.botnet_p2p.Message.NodeDescription.serializeBinaryToWriter
    );
  }
};


/**
 * repeated NodeDescription nodes = 1;
 * @return {!Array.<!proto.botnet_p2p.Message.NodeDescription>}
 */
proto.botnet_p2p.Message.FoundNodes.prototype.getNodesList = function() {
  return /** @type{!Array.<!proto.botnet_p2p.Message.NodeDescription>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.botnet_p2p.Message.NodeDescription, 1));
};


/** @param {!Array.<!proto.botnet_p2p.Message.NodeDescription>} value */
proto.botnet_p2p.Message.FoundNodes.prototype.setNodesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.botnet_p2p.Message.NodeDescription=} opt_value
 * @param {number=} opt_index
 * @return {!proto.botnet_p2p.Message.NodeDescription}
 */
proto.botnet_p2p.Message.FoundNodes.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.botnet_p2p.Message.NodeDescription, opt_index);
};


proto.botnet_p2p.Message.FoundNodes.prototype.clearNodesList = function() {
  this.setNodesList([]);
};


/**
 * optional uint64 uuid = 1;
 * @return {number}
 */
proto.botnet_p2p.Message.prototype.getUuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.botnet_p2p.Message.prototype.setUuid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional MessageType type = 2;
 * @return {!proto.botnet_p2p.Message.MessageType}
 */
proto.botnet_p2p.Message.prototype.getType = function() {
  return /** @type {!proto.botnet_p2p.Message.MessageType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.botnet_p2p.Message.MessageType} value */
proto.botnet_p2p.Message.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string sender = 3;
 * @return {string}
 */
proto.botnet_p2p.Message.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.botnet_p2p.Message.prototype.setSender = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string receiver = 4;
 * @return {string}
 */
proto.botnet_p2p.Message.prototype.getReceiver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.botnet_p2p.Message.prototype.setReceiver = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool propagation = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.botnet_p2p.Message.prototype.getPropagation = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.botnet_p2p.Message.prototype.setPropagation = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bytes signature = 6;
 * @return {!(string|Uint8Array)}
 */
proto.botnet_p2p.Message.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes signature = 6;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.botnet_p2p.Message.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.botnet_p2p.Message.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.botnet_p2p.Message.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional Command pCommand = 7;
 * @return {?proto.botnet_p2p.Message.Command}
 */
proto.botnet_p2p.Message.prototype.getPcommand = function() {
  return /** @type{?proto.botnet_p2p.Message.Command} */ (
    jspb.Message.getWrapperField(this, proto.botnet_p2p.Message.Command, 7));
};


/** @param {?proto.botnet_p2p.Message.Command|undefined} value */
proto.botnet_p2p.Message.prototype.setPcommand = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.botnet_p2p.Message.oneofGroups_[0], value);
};


proto.botnet_p2p.Message.prototype.clearPcommand = function() {
  this.setPcommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.botnet_p2p.Message.prototype.hasPcommand = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Response pResponse = 8;
 * @return {?proto.botnet_p2p.Message.Response}
 */
proto.botnet_p2p.Message.prototype.getPresponse = function() {
  return /** @type{?proto.botnet_p2p.Message.Response} */ (
    jspb.Message.getWrapperField(this, proto.botnet_p2p.Message.Response, 8));
};


/** @param {?proto.botnet_p2p.Message.Response|undefined} value */
proto.botnet_p2p.Message.prototype.setPresponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.botnet_p2p.Message.oneofGroups_[0], value);
};


proto.botnet_p2p.Message.prototype.clearPresponse = function() {
  this.setPresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.botnet_p2p.Message.prototype.hasPresponse = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional FileChunk pFile = 9;
 * @return {?proto.botnet_p2p.Message.FileChunk}
 */
proto.botnet_p2p.Message.prototype.getPfile = function() {
  return /** @type{?proto.botnet_p2p.Message.FileChunk} */ (
    jspb.Message.getWrapperField(this, proto.botnet_p2p.Message.FileChunk, 9));
};


/** @param {?proto.botnet_p2p.Message.FileChunk|undefined} value */
proto.botnet_p2p.Message.prototype.setPfile = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.botnet_p2p.Message.oneofGroups_[0], value);
};


proto.botnet_p2p.Message.prototype.clearPfile = function() {
  this.setPfile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.botnet_p2p.Message.prototype.hasPfile = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional NATRequest pNATRequest = 10;
 * @return {?proto.botnet_p2p.Message.NATRequest}
 */
proto.botnet_p2p.Message.prototype.getPnatrequest = function() {
  return /** @type{?proto.botnet_p2p.Message.NATRequest} */ (
    jspb.Message.getWrapperField(this, proto.botnet_p2p.Message.NATRequest, 10));
};


/** @param {?proto.botnet_p2p.Message.NATRequest|undefined} value */
proto.botnet_p2p.Message.prototype.setPnatrequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.botnet_p2p.Message.oneofGroups_[0], value);
};


proto.botnet_p2p.Message.prototype.clearPnatrequest = function() {
  this.setPnatrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.botnet_p2p.Message.prototype.hasPnatrequest = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional NATCheck pNATCheck = 11;
 * @return {?proto.botnet_p2p.Message.NATCheck}
 */
proto.botnet_p2p.Message.prototype.getPnatcheck = function() {
  return /** @type{?proto.botnet_p2p.Message.NATCheck} */ (
    jspb.Message.getWrapperField(this, proto.botnet_p2p.Message.NATCheck, 11));
};


/** @param {?proto.botnet_p2p.Message.NATCheck|undefined} value */
proto.botnet_p2p.Message.prototype.setPnatcheck = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.botnet_p2p.Message.oneofGroups_[0], value);
};


proto.botnet_p2p.Message.prototype.clearPnatcheck = function() {
  this.setPnatcheck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.botnet_p2p.Message.prototype.hasPnatcheck = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Leave pLeave = 12;
 * @return {?proto.botnet_p2p.Message.Leave}
 */
proto.botnet_p2p.Message.prototype.getPleave = function() {
  return /** @type{?proto.botnet_p2p.Message.Leave} */ (
    jspb.Message.getWrapperField(this, proto.botnet_p2p.Message.Leave, 12));
};


/** @param {?proto.botnet_p2p.Message.Leave|undefined} value */
proto.botnet_p2p.Message.prototype.setPleave = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.botnet_p2p.Message.oneofGroups_[0], value);
};


proto.botnet_p2p.Message.prototype.clearPleave = function() {
  this.setPleave(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.botnet_p2p.Message.prototype.hasPleave = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional FindNode pFindNode = 13;
 * @return {?proto.botnet_p2p.Message.FindNode}
 */
proto.botnet_p2p.Message.prototype.getPfindnode = function() {
  return /** @type{?proto.botnet_p2p.Message.FindNode} */ (
    jspb.Message.getWrapperField(this, proto.botnet_p2p.Message.FindNode, 13));
};


/** @param {?proto.botnet_p2p.Message.FindNode|undefined} value */
proto.botnet_p2p.Message.prototype.setPfindnode = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.botnet_p2p.Message.oneofGroups_[0], value);
};


proto.botnet_p2p.Message.prototype.clearPfindnode = function() {
  this.setPfindnode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.botnet_p2p.Message.prototype.hasPfindnode = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional FoundNodes pFoundNodes = 14;
 * @return {?proto.botnet_p2p.Message.FoundNodes}
 */
proto.botnet_p2p.Message.prototype.getPfoundnodes = function() {
  return /** @type{?proto.botnet_p2p.Message.FoundNodes} */ (
    jspb.Message.getWrapperField(this, proto.botnet_p2p.Message.FoundNodes, 14));
};


/** @param {?proto.botnet_p2p.Message.FoundNodes|undefined} value */
proto.botnet_p2p.Message.prototype.setPfoundnodes = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.botnet_p2p.Message.oneofGroups_[0], value);
};


proto.botnet_p2p.Message.prototype.clearPfoundnodes = function() {
  this.setPfoundnodes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.botnet_p2p.Message.prototype.hasPfoundnodes = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional FindValue pFindValue = 15;
 * @return {?proto.botnet_p2p.Message.FindValue}
 */
proto.botnet_p2p.Message.prototype.getPfindvalue = function() {
  return /** @type{?proto.botnet_p2p.Message.FindValue} */ (
    jspb.Message.getWrapperField(this, proto.botnet_p2p.Message.FindValue, 15));
};


/** @param {?proto.botnet_p2p.Message.FindValue|undefined} value */
proto.botnet_p2p.Message.prototype.setPfindvalue = function(value) {
  jspb.Message.setOneofWrapperField(this, 15, proto.botnet_p2p.Message.oneofGroups_[0], value);
};


proto.botnet_p2p.Message.prototype.clearPfindvalue = function() {
  this.setPfindvalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.botnet_p2p.Message.prototype.hasPfindvalue = function() {
  return jspb.Message.getField(this, 15) != null;
};


goog.object.extend(exports, proto.botnet_p2p);
