// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#include "Message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace botnet_p2p {
class Message_CommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Message_Command>
      _instance;
} _Message_Command_default_instance_;
class Message_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Message_Response>
      _instance;
} _Message_Response_default_instance_;
class Message_FileChunkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Message_FileChunk>
      _instance;
} _Message_FileChunk_default_instance_;
class Message_NATRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Message_NATRequest>
      _instance;
} _Message_NATRequest_default_instance_;
class Message_NATCheckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Message_NATCheck>
      _instance;
} _Message_NATCheck_default_instance_;
class Message_JoinDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Message_Join>
      _instance;
} _Message_Join_default_instance_;
class Message_LeaveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Message_Leave>
      _instance;
} _Message_Leave_default_instance_;
class MessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Message>
      _instance;
  const ::botnet_p2p::Message_Command* pcommand_;
  const ::botnet_p2p::Message_Response* presponse_;
  const ::botnet_p2p::Message_FileChunk* pfile_;
  const ::botnet_p2p::Message_NATRequest* pnatrequest_;
  const ::botnet_p2p::Message_NATCheck* pnatcheck_;
  const ::botnet_p2p::Message_Join* pjoin_;
  const ::botnet_p2p::Message_Leave* pleave_;
} _Message_default_instance_;
}  // namespace botnet_p2p
namespace protobuf_Message_2eproto {
void InitDefaultsMessage_CommandImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::botnet_p2p::_Message_Command_default_instance_;
    new (ptr) ::botnet_p2p::Message_Command();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::botnet_p2p::Message_Command::InitAsDefaultInstance();
}

void InitDefaultsMessage_Command() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMessage_CommandImpl);
}

void InitDefaultsMessage_ResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::botnet_p2p::_Message_Response_default_instance_;
    new (ptr) ::botnet_p2p::Message_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::botnet_p2p::Message_Response::InitAsDefaultInstance();
}

void InitDefaultsMessage_Response() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMessage_ResponseImpl);
}

void InitDefaultsMessage_FileChunkImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::botnet_p2p::_Message_FileChunk_default_instance_;
    new (ptr) ::botnet_p2p::Message_FileChunk();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::botnet_p2p::Message_FileChunk::InitAsDefaultInstance();
}

void InitDefaultsMessage_FileChunk() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMessage_FileChunkImpl);
}

void InitDefaultsMessage_NATRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::botnet_p2p::_Message_NATRequest_default_instance_;
    new (ptr) ::botnet_p2p::Message_NATRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::botnet_p2p::Message_NATRequest::InitAsDefaultInstance();
}

void InitDefaultsMessage_NATRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMessage_NATRequestImpl);
}

void InitDefaultsMessage_NATCheckImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::botnet_p2p::_Message_NATCheck_default_instance_;
    new (ptr) ::botnet_p2p::Message_NATCheck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::botnet_p2p::Message_NATCheck::InitAsDefaultInstance();
}

void InitDefaultsMessage_NATCheck() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMessage_NATCheckImpl);
}

void InitDefaultsMessage_JoinImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::botnet_p2p::_Message_Join_default_instance_;
    new (ptr) ::botnet_p2p::Message_Join();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::botnet_p2p::Message_Join::InitAsDefaultInstance();
}

void InitDefaultsMessage_Join() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMessage_JoinImpl);
}

void InitDefaultsMessage_LeaveImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::botnet_p2p::_Message_Leave_default_instance_;
    new (ptr) ::botnet_p2p::Message_Leave();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::botnet_p2p::Message_Leave::InitAsDefaultInstance();
}

void InitDefaultsMessage_Leave() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMessage_LeaveImpl);
}

void InitDefaultsMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Message_2eproto::InitDefaultsMessage_Command();
  protobuf_Message_2eproto::InitDefaultsMessage_Response();
  protobuf_Message_2eproto::InitDefaultsMessage_FileChunk();
  protobuf_Message_2eproto::InitDefaultsMessage_NATRequest();
  protobuf_Message_2eproto::InitDefaultsMessage_NATCheck();
  protobuf_Message_2eproto::InitDefaultsMessage_Join();
  protobuf_Message_2eproto::InitDefaultsMessage_Leave();
  {
    void* ptr = &::botnet_p2p::_Message_default_instance_;
    new (ptr) ::botnet_p2p::Message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::botnet_p2p::Message::InitAsDefaultInstance();
}

void InitDefaultsMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMessageImpl);
}

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message_Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message_Command, commandstring_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message_Command, sendresponse_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message_Response, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message_Response, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message_FileChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message_FileChunk, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message_FileChunk, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message_FileChunk, chunknumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message_FileChunk, allchunks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message_FileChunk, chunksize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message_FileChunk, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message_NATRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message_NATRequest, target_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message_NATCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message_NATCheck, source_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message_Join, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message_Join, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message_Join, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message_Join, isnat_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message_Leave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message_Leave, guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message, sender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message, receiver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message, propagation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message, signature_),
  offsetof(::botnet_p2p::MessageDefaultTypeInternal, pcommand_),
  offsetof(::botnet_p2p::MessageDefaultTypeInternal, presponse_),
  offsetof(::botnet_p2p::MessageDefaultTypeInternal, pfile_),
  offsetof(::botnet_p2p::MessageDefaultTypeInternal, pnatrequest_),
  offsetof(::botnet_p2p::MessageDefaultTypeInternal, pnatcheck_),
  offsetof(::botnet_p2p::MessageDefaultTypeInternal, pjoin_),
  offsetof(::botnet_p2p::MessageDefaultTypeInternal, pleave_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::botnet_p2p::Message, payload_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::botnet_p2p::Message_Command)},
  { 7, -1, sizeof(::botnet_p2p::Message_Response)},
  { 14, -1, sizeof(::botnet_p2p::Message_FileChunk)},
  { 25, -1, sizeof(::botnet_p2p::Message_NATRequest)},
  { 31, -1, sizeof(::botnet_p2p::Message_NATCheck)},
  { 37, -1, sizeof(::botnet_p2p::Message_Join)},
  { 45, -1, sizeof(::botnet_p2p::Message_Leave)},
  { 51, -1, sizeof(::botnet_p2p::Message)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::botnet_p2p::_Message_Command_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::botnet_p2p::_Message_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::botnet_p2p::_Message_FileChunk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::botnet_p2p::_Message_NATRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::botnet_p2p::_Message_NATCheck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::botnet_p2p::_Message_Join_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::botnet_p2p::_Message_Leave_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::botnet_p2p::_Message_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Message.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rMessage.proto\022\nbotnet_p2p\"\211\010\n\007Message\022"
      "\014\n\004uuid\030\001 \001(\t\022-\n\004type\030\002 \001(\0162\037.botnet_p2p"
      ".Message.MessageType\022\016\n\006sender\030\003 \001(\t\022\020\n\010"
      "receiver\030\004 \001(\t\022\023\n\013propagation\030\005 \001(\010\022\021\n\ts"
      "ignature\030\006 \001(\014\022/\n\010pCommand\030\007 \001(\0132\033.botne"
      "t_p2p.Message.CommandH\000\0221\n\tpResponse\030\010 \001"
      "(\0132\034.botnet_p2p.Message.ResponseH\000\022.\n\005pF"
      "ile\030\t \001(\0132\035.botnet_p2p.Message.FileChunk"
      "H\000\0225\n\013pNATRequest\030\n \001(\0132\036.botnet_p2p.Mes"
      "sage.NATRequestH\000\0221\n\tpNATCheck\030\013 \001(\0132\034.b"
      "otnet_p2p.Message.NATCheckH\000\022)\n\005pJoin\030\014 "
      "\001(\0132\030.botnet_p2p.Message.JoinH\000\022+\n\006pLeav"
      "e\030\r \001(\0132\031.botnet_p2p.Message.LeaveH\000\0326\n\007"
      "Command\022\025\n\rcommandString\030\001 \001(\t\022\024\n\014sendRe"
      "sponse\030\002 \001(\010\032E\n\010Response\022\r\n\005value\030\001 \001(\t\022"
      "*\n\006status\030\002 \001(\0162\032.botnet_p2p.Message.Sta"
      "tus\032p\n\tFileChunk\022\014\n\004path\030\001 \001(\t\022\014\n\004name\030\002"
      " \001(\010\022\023\n\013chunkNumber\030\003 \001(\r\022\021\n\tallChunks\030\004"
      " \001(\r\022\021\n\tchunkSize\030\005 \001(\r\022\014\n\004data\030\006 \001(\014\032\034\n"
      "\nNATRequest\022\016\n\006target\030\001 \001(\t\032\032\n\010NATCheck\022"
      "\016\n\006source\030\001 \001(\t\032/\n\004Join\022\n\n\002IP\030\001 \001(\t\022\014\n\004P"
      "ort\030\002 \001(\t\022\r\n\005isNAT\030\003 \001(\010\032\025\n\005Leave\022\014\n\004gui"
      "d\030\001 \001(\t\"\206\001\n\013MessageType\022\r\n\tUNDEFINED\020\000\022\013"
      "\n\007COMMAND\020\001\022\014\n\010RESPONSE\020\002\022\016\n\nFILE_CHUNK\020"
      "\003\022\017\n\013NAT_REQUEST\020\004\022\r\n\tNAT_CHECK\020\005\022\010\n\004PIN"
      "G\020\006\022\010\n\004JOIN\020\007\022\t\n\005LEAVE\020\010\"\032\n\006Status\022\010\n\004FA"
      "IL\020\000\022\006\n\002OK\020\001B\t\n\007payloadb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1071);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Message.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Message_2eproto
namespace botnet_p2p {
const ::google::protobuf::EnumDescriptor* Message_MessageType_descriptor() {
  protobuf_Message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Message_2eproto::file_level_enum_descriptors[0];
}
bool Message_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Message_MessageType Message::UNDEFINED;
const Message_MessageType Message::COMMAND;
const Message_MessageType Message::RESPONSE;
const Message_MessageType Message::FILE_CHUNK;
const Message_MessageType Message::NAT_REQUEST;
const Message_MessageType Message::NAT_CHECK;
const Message_MessageType Message::PING;
const Message_MessageType Message::JOIN;
const Message_MessageType Message::LEAVE;
const Message_MessageType Message::MessageType_MIN;
const Message_MessageType Message::MessageType_MAX;
const int Message::MessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Message_Status_descriptor() {
  protobuf_Message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Message_2eproto::file_level_enum_descriptors[1];
}
bool Message_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Message_Status Message::FAIL;
const Message_Status Message::OK;
const Message_Status Message::Status_MIN;
const Message_Status Message::Status_MAX;
const int Message::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Message_Command::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message_Command::kCommandStringFieldNumber;
const int Message_Command::kSendResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message_Command::Message_Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Message_2eproto::InitDefaultsMessage_Command();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:botnet_p2p.Message.Command)
}
Message_Command::Message_Command(const Message_Command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  commandstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.commandstring().size() > 0) {
    commandstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commandstring_);
  }
  sendresponse_ = from.sendresponse_;
  // @@protoc_insertion_point(copy_constructor:botnet_p2p.Message.Command)
}

void Message_Command::SharedCtor() {
  commandstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sendresponse_ = false;
  _cached_size_ = 0;
}

Message_Command::~Message_Command() {
  // @@protoc_insertion_point(destructor:botnet_p2p.Message.Command)
  SharedDtor();
}

void Message_Command::SharedDtor() {
  commandstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Message_Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_Command::descriptor() {
  ::protobuf_Message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Message_Command& Message_Command::default_instance() {
  ::protobuf_Message_2eproto::InitDefaultsMessage_Command();
  return *internal_default_instance();
}

Message_Command* Message_Command::New(::google::protobuf::Arena* arena) const {
  Message_Command* n = new Message_Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message_Command::Clear() {
// @@protoc_insertion_point(message_clear_start:botnet_p2p.Message.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commandstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sendresponse_ = false;
  _internal_metadata_.Clear();
}

bool Message_Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:botnet_p2p.Message.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string commandString = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commandstring()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->commandstring().data(), static_cast<int>(this->commandstring().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "botnet_p2p.Message.Command.commandString"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool sendResponse = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sendresponse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:botnet_p2p.Message.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:botnet_p2p.Message.Command)
  return false;
#undef DO_
}

void Message_Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:botnet_p2p.Message.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string commandString = 1;
  if (this->commandstring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->commandstring().data(), static_cast<int>(this->commandstring().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "botnet_p2p.Message.Command.commandString");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->commandstring(), output);
  }

  // bool sendResponse = 2;
  if (this->sendresponse() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->sendresponse(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:botnet_p2p.Message.Command)
}

::google::protobuf::uint8* Message_Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:botnet_p2p.Message.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string commandString = 1;
  if (this->commandstring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->commandstring().data(), static_cast<int>(this->commandstring().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "botnet_p2p.Message.Command.commandString");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->commandstring(), target);
  }

  // bool sendResponse = 2;
  if (this->sendresponse() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->sendresponse(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botnet_p2p.Message.Command)
  return target;
}

size_t Message_Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botnet_p2p.Message.Command)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string commandString = 1;
  if (this->commandstring().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->commandstring());
  }

  // bool sendResponse = 2;
  if (this->sendresponse() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:botnet_p2p.Message.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Message_Command* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message_Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:botnet_p2p.Message.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:botnet_p2p.Message.Command)
    MergeFrom(*source);
  }
}

void Message_Command::MergeFrom(const Message_Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:botnet_p2p.Message.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.commandstring().size() > 0) {

    commandstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commandstring_);
  }
  if (from.sendresponse() != 0) {
    set_sendresponse(from.sendresponse());
  }
}

void Message_Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:botnet_p2p.Message.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Command::CopyFrom(const Message_Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botnet_p2p.Message.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Command::IsInitialized() const {
  return true;
}

void Message_Command::Swap(Message_Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message_Command::InternalSwap(Message_Command* other) {
  using std::swap;
  commandstring_.Swap(&other->commandstring_);
  swap(sendresponse_, other->sendresponse_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message_Command::GetMetadata() const {
  protobuf_Message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Message_Response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message_Response::kValueFieldNumber;
const int Message_Response::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message_Response::Message_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Message_2eproto::InitDefaultsMessage_Response();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:botnet_p2p.Message.Response)
}
Message_Response::Message_Response(const Message_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:botnet_p2p.Message.Response)
}

void Message_Response::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _cached_size_ = 0;
}

Message_Response::~Message_Response() {
  // @@protoc_insertion_point(destructor:botnet_p2p.Message.Response)
  SharedDtor();
}

void Message_Response::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Message_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_Response::descriptor() {
  ::protobuf_Message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Message_Response& Message_Response::default_instance() {
  ::protobuf_Message_2eproto::InitDefaultsMessage_Response();
  return *internal_default_instance();
}

Message_Response* Message_Response::New(::google::protobuf::Arena* arena) const {
  Message_Response* n = new Message_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:botnet_p2p.Message.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _internal_metadata_.Clear();
}

bool Message_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:botnet_p2p.Message.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "botnet_p2p.Message.Response.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .botnet_p2p.Message.Status status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::botnet_p2p::Message_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:botnet_p2p.Message.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:botnet_p2p.Message.Response)
  return false;
#undef DO_
}

void Message_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:botnet_p2p.Message.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "botnet_p2p.Message.Response.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  // .botnet_p2p.Message.Status status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:botnet_p2p.Message.Response)
}

::google::protobuf::uint8* Message_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:botnet_p2p.Message.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "botnet_p2p.Message.Response.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  // .botnet_p2p.Message.Status status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botnet_p2p.Message.Response)
  return target;
}

size_t Message_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botnet_p2p.Message.Response)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // .botnet_p2p.Message.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:botnet_p2p.Message.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Message_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:botnet_p2p.Message.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:botnet_p2p.Message.Response)
    MergeFrom(*source);
  }
}

void Message_Response::MergeFrom(const Message_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:botnet_p2p.Message.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Message_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:botnet_p2p.Message.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Response::CopyFrom(const Message_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botnet_p2p.Message.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Response::IsInitialized() const {
  return true;
}

void Message_Response::Swap(Message_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message_Response::InternalSwap(Message_Response* other) {
  using std::swap;
  value_.Swap(&other->value_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message_Response::GetMetadata() const {
  protobuf_Message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Message_FileChunk::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message_FileChunk::kPathFieldNumber;
const int Message_FileChunk::kNameFieldNumber;
const int Message_FileChunk::kChunkNumberFieldNumber;
const int Message_FileChunk::kAllChunksFieldNumber;
const int Message_FileChunk::kChunkSizeFieldNumber;
const int Message_FileChunk::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message_FileChunk::Message_FileChunk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Message_2eproto::InitDefaultsMessage_FileChunk();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:botnet_p2p.Message.FileChunk)
}
Message_FileChunk::Message_FileChunk(const Message_FileChunk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&name_, &from.name_,
    static_cast<size_t>(reinterpret_cast<char*>(&chunksize_) -
    reinterpret_cast<char*>(&name_)) + sizeof(chunksize_));
  // @@protoc_insertion_point(copy_constructor:botnet_p2p.Message.FileChunk)
}

void Message_FileChunk::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chunksize_) -
      reinterpret_cast<char*>(&name_)) + sizeof(chunksize_));
  _cached_size_ = 0;
}

Message_FileChunk::~Message_FileChunk() {
  // @@protoc_insertion_point(destructor:botnet_p2p.Message.FileChunk)
  SharedDtor();
}

void Message_FileChunk::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Message_FileChunk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_FileChunk::descriptor() {
  ::protobuf_Message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Message_FileChunk& Message_FileChunk::default_instance() {
  ::protobuf_Message_2eproto::InitDefaultsMessage_FileChunk();
  return *internal_default_instance();
}

Message_FileChunk* Message_FileChunk::New(::google::protobuf::Arena* arena) const {
  Message_FileChunk* n = new Message_FileChunk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message_FileChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:botnet_p2p.Message.FileChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chunksize_) -
      reinterpret_cast<char*>(&name_)) + sizeof(chunksize_));
  _internal_metadata_.Clear();
}

bool Message_FileChunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:botnet_p2p.Message.FileChunk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "botnet_p2p.Message.FileChunk.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &name_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 chunkNumber = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chunknumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 allChunks = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allchunks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 chunkSize = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chunksize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:botnet_p2p.Message.FileChunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:botnet_p2p.Message.FileChunk)
  return false;
#undef DO_
}

void Message_FileChunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:botnet_p2p.Message.FileChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "botnet_p2p.Message.FileChunk.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // bool name = 2;
  if (this->name() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->name(), output);
  }

  // uint32 chunkNumber = 3;
  if (this->chunknumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->chunknumber(), output);
  }

  // uint32 allChunks = 4;
  if (this->allchunks() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->allchunks(), output);
  }

  // uint32 chunkSize = 5;
  if (this->chunksize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->chunksize(), output);
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:botnet_p2p.Message.FileChunk)
}

::google::protobuf::uint8* Message_FileChunk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:botnet_p2p.Message.FileChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "botnet_p2p.Message.FileChunk.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // bool name = 2;
  if (this->name() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->name(), target);
  }

  // uint32 chunkNumber = 3;
  if (this->chunknumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->chunknumber(), target);
  }

  // uint32 allChunks = 4;
  if (this->allchunks() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->allchunks(), target);
  }

  // uint32 chunkSize = 5;
  if (this->chunksize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->chunksize(), target);
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botnet_p2p.Message.FileChunk)
  return target;
}

size_t Message_FileChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botnet_p2p.Message.FileChunk)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // bool name = 2;
  if (this->name() != 0) {
    total_size += 1 + 1;
  }

  // uint32 chunkNumber = 3;
  if (this->chunknumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chunknumber());
  }

  // uint32 allChunks = 4;
  if (this->allchunks() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->allchunks());
  }

  // uint32 chunkSize = 5;
  if (this->chunksize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chunksize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_FileChunk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:botnet_p2p.Message.FileChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const Message_FileChunk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message_FileChunk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:botnet_p2p.Message.FileChunk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:botnet_p2p.Message.FileChunk)
    MergeFrom(*source);
  }
}

void Message_FileChunk::MergeFrom(const Message_FileChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:botnet_p2p.Message.FileChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.name() != 0) {
    set_name(from.name());
  }
  if (from.chunknumber() != 0) {
    set_chunknumber(from.chunknumber());
  }
  if (from.allchunks() != 0) {
    set_allchunks(from.allchunks());
  }
  if (from.chunksize() != 0) {
    set_chunksize(from.chunksize());
  }
}

void Message_FileChunk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:botnet_p2p.Message.FileChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_FileChunk::CopyFrom(const Message_FileChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botnet_p2p.Message.FileChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_FileChunk::IsInitialized() const {
  return true;
}

void Message_FileChunk::Swap(Message_FileChunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message_FileChunk::InternalSwap(Message_FileChunk* other) {
  using std::swap;
  path_.Swap(&other->path_);
  data_.Swap(&other->data_);
  swap(name_, other->name_);
  swap(chunknumber_, other->chunknumber_);
  swap(allchunks_, other->allchunks_);
  swap(chunksize_, other->chunksize_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message_FileChunk::GetMetadata() const {
  protobuf_Message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Message_NATRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message_NATRequest::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message_NATRequest::Message_NATRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Message_2eproto::InitDefaultsMessage_NATRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:botnet_p2p.Message.NATRequest)
}
Message_NATRequest::Message_NATRequest(const Message_NATRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.target().size() > 0) {
    target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  // @@protoc_insertion_point(copy_constructor:botnet_p2p.Message.NATRequest)
}

void Message_NATRequest::SharedCtor() {
  target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Message_NATRequest::~Message_NATRequest() {
  // @@protoc_insertion_point(destructor:botnet_p2p.Message.NATRequest)
  SharedDtor();
}

void Message_NATRequest::SharedDtor() {
  target_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Message_NATRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_NATRequest::descriptor() {
  ::protobuf_Message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Message_NATRequest& Message_NATRequest::default_instance() {
  ::protobuf_Message_2eproto::InitDefaultsMessage_NATRequest();
  return *internal_default_instance();
}

Message_NATRequest* Message_NATRequest::New(::google::protobuf::Arena* arena) const {
  Message_NATRequest* n = new Message_NATRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message_NATRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:botnet_p2p.Message.NATRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Message_NATRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:botnet_p2p.Message.NATRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string target = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target().data(), static_cast<int>(this->target().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "botnet_p2p.Message.NATRequest.target"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:botnet_p2p.Message.NATRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:botnet_p2p.Message.NATRequest)
  return false;
#undef DO_
}

void Message_NATRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:botnet_p2p.Message.NATRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1;
  if (this->target().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target().data(), static_cast<int>(this->target().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "botnet_p2p.Message.NATRequest.target");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->target(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:botnet_p2p.Message.NATRequest)
}

::google::protobuf::uint8* Message_NATRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:botnet_p2p.Message.NATRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1;
  if (this->target().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target().data(), static_cast<int>(this->target().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "botnet_p2p.Message.NATRequest.target");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->target(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botnet_p2p.Message.NATRequest)
  return target;
}

size_t Message_NATRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botnet_p2p.Message.NATRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string target = 1;
  if (this->target().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->target());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_NATRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:botnet_p2p.Message.NATRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const Message_NATRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message_NATRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:botnet_p2p.Message.NATRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:botnet_p2p.Message.NATRequest)
    MergeFrom(*source);
  }
}

void Message_NATRequest::MergeFrom(const Message_NATRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:botnet_p2p.Message.NATRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target().size() > 0) {

    target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
}

void Message_NATRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:botnet_p2p.Message.NATRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_NATRequest::CopyFrom(const Message_NATRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botnet_p2p.Message.NATRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_NATRequest::IsInitialized() const {
  return true;
}

void Message_NATRequest::Swap(Message_NATRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message_NATRequest::InternalSwap(Message_NATRequest* other) {
  using std::swap;
  target_.Swap(&other->target_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message_NATRequest::GetMetadata() const {
  protobuf_Message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Message_NATCheck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message_NATCheck::kSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message_NATCheck::Message_NATCheck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Message_2eproto::InitDefaultsMessage_NATCheck();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:botnet_p2p.Message.NATCheck)
}
Message_NATCheck::Message_NATCheck(const Message_NATCheck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source().size() > 0) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  // @@protoc_insertion_point(copy_constructor:botnet_p2p.Message.NATCheck)
}

void Message_NATCheck::SharedCtor() {
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Message_NATCheck::~Message_NATCheck() {
  // @@protoc_insertion_point(destructor:botnet_p2p.Message.NATCheck)
  SharedDtor();
}

void Message_NATCheck::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Message_NATCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_NATCheck::descriptor() {
  ::protobuf_Message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Message_NATCheck& Message_NATCheck::default_instance() {
  ::protobuf_Message_2eproto::InitDefaultsMessage_NATCheck();
  return *internal_default_instance();
}

Message_NATCheck* Message_NATCheck::New(::google::protobuf::Arena* arena) const {
  Message_NATCheck* n = new Message_NATCheck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message_NATCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:botnet_p2p.Message.NATCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Message_NATCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:botnet_p2p.Message.NATCheck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "botnet_p2p.Message.NATCheck.source"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:botnet_p2p.Message.NATCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:botnet_p2p.Message.NATCheck)
  return false;
#undef DO_
}

void Message_NATCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:botnet_p2p.Message.NATCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string source = 1;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "botnet_p2p.Message.NATCheck.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:botnet_p2p.Message.NATCheck)
}

::google::protobuf::uint8* Message_NATCheck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:botnet_p2p.Message.NATCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string source = 1;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "botnet_p2p.Message.NATCheck.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botnet_p2p.Message.NATCheck)
  return target;
}

size_t Message_NATCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botnet_p2p.Message.NATCheck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string source = 1;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_NATCheck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:botnet_p2p.Message.NATCheck)
  GOOGLE_DCHECK_NE(&from, this);
  const Message_NATCheck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message_NATCheck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:botnet_p2p.Message.NATCheck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:botnet_p2p.Message.NATCheck)
    MergeFrom(*source);
  }
}

void Message_NATCheck::MergeFrom(const Message_NATCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:botnet_p2p.Message.NATCheck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
}

void Message_NATCheck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:botnet_p2p.Message.NATCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_NATCheck::CopyFrom(const Message_NATCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botnet_p2p.Message.NATCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_NATCheck::IsInitialized() const {
  return true;
}

void Message_NATCheck::Swap(Message_NATCheck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message_NATCheck::InternalSwap(Message_NATCheck* other) {
  using std::swap;
  source_.Swap(&other->source_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message_NATCheck::GetMetadata() const {
  protobuf_Message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Message_Join::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message_Join::kIPFieldNumber;
const int Message_Join::kPortFieldNumber;
const int Message_Join::kIsNATFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message_Join::Message_Join()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Message_2eproto::InitDefaultsMessage_Join();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:botnet_p2p.Message.Join)
}
Message_Join::Message_Join(const Message_Join& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.port().size() > 0) {
    port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_);
  }
  isnat_ = from.isnat_;
  // @@protoc_insertion_point(copy_constructor:botnet_p2p.Message.Join)
}

void Message_Join::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isnat_ = false;
  _cached_size_ = 0;
}

Message_Join::~Message_Join() {
  // @@protoc_insertion_point(destructor:botnet_p2p.Message.Join)
  SharedDtor();
}

void Message_Join::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Message_Join::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_Join::descriptor() {
  ::protobuf_Message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Message_Join& Message_Join::default_instance() {
  ::protobuf_Message_2eproto::InitDefaultsMessage_Join();
  return *internal_default_instance();
}

Message_Join* Message_Join::New(::google::protobuf::Arena* arena) const {
  Message_Join* n = new Message_Join;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message_Join::Clear() {
// @@protoc_insertion_point(message_clear_start:botnet_p2p.Message.Join)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isnat_ = false;
  _internal_metadata_.Clear();
}

bool Message_Join::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:botnet_p2p.Message.Join)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string IP = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "botnet_p2p.Message.Join.IP"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->port().data(), static_cast<int>(this->port().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "botnet_p2p.Message.Join.Port"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isNAT = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:botnet_p2p.Message.Join)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:botnet_p2p.Message.Join)
  return false;
#undef DO_
}

void Message_Join::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:botnet_p2p.Message.Join)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string IP = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "botnet_p2p.Message.Join.IP");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // string Port = 2;
  if (this->port().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port().data(), static_cast<int>(this->port().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "botnet_p2p.Message.Join.Port");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->port(), output);
  }

  // bool isNAT = 3;
  if (this->isnat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isnat(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:botnet_p2p.Message.Join)
}

::google::protobuf::uint8* Message_Join::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:botnet_p2p.Message.Join)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string IP = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "botnet_p2p.Message.Join.IP");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // string Port = 2;
  if (this->port().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port().data(), static_cast<int>(this->port().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "botnet_p2p.Message.Join.Port");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->port(), target);
  }

  // bool isNAT = 3;
  if (this->isnat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isnat(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botnet_p2p.Message.Join)
  return target;
}

size_t Message_Join::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botnet_p2p.Message.Join)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string IP = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // string Port = 2;
  if (this->port().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->port());
  }

  // bool isNAT = 3;
  if (this->isnat() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_Join::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:botnet_p2p.Message.Join)
  GOOGLE_DCHECK_NE(&from, this);
  const Message_Join* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message_Join>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:botnet_p2p.Message.Join)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:botnet_p2p.Message.Join)
    MergeFrom(*source);
  }
}

void Message_Join::MergeFrom(const Message_Join& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:botnet_p2p.Message.Join)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port().size() > 0) {

    port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_);
  }
  if (from.isnat() != 0) {
    set_isnat(from.isnat());
  }
}

void Message_Join::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:botnet_p2p.Message.Join)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Join::CopyFrom(const Message_Join& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botnet_p2p.Message.Join)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Join::IsInitialized() const {
  return true;
}

void Message_Join::Swap(Message_Join* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message_Join::InternalSwap(Message_Join* other) {
  using std::swap;
  ip_.Swap(&other->ip_);
  port_.Swap(&other->port_);
  swap(isnat_, other->isnat_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message_Join::GetMetadata() const {
  protobuf_Message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Message_Leave::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message_Leave::kGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message_Leave::Message_Leave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Message_2eproto::InitDefaultsMessage_Leave();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:botnet_p2p.Message.Leave)
}
Message_Leave::Message_Leave(const Message_Leave& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.guid().size() > 0) {
    guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guid_);
  }
  // @@protoc_insertion_point(copy_constructor:botnet_p2p.Message.Leave)
}

void Message_Leave::SharedCtor() {
  guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Message_Leave::~Message_Leave() {
  // @@protoc_insertion_point(destructor:botnet_p2p.Message.Leave)
  SharedDtor();
}

void Message_Leave::SharedDtor() {
  guid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Message_Leave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_Leave::descriptor() {
  ::protobuf_Message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Message_Leave& Message_Leave::default_instance() {
  ::protobuf_Message_2eproto::InitDefaultsMessage_Leave();
  return *internal_default_instance();
}

Message_Leave* Message_Leave::New(::google::protobuf::Arena* arena) const {
  Message_Leave* n = new Message_Leave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message_Leave::Clear() {
// @@protoc_insertion_point(message_clear_start:botnet_p2p.Message.Leave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Message_Leave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:botnet_p2p.Message.Leave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->guid().data(), static_cast<int>(this->guid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "botnet_p2p.Message.Leave.guid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:botnet_p2p.Message.Leave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:botnet_p2p.Message.Leave)
  return false;
#undef DO_
}

void Message_Leave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:botnet_p2p.Message.Leave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string guid = 1;
  if (this->guid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guid().data(), static_cast<int>(this->guid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "botnet_p2p.Message.Leave.guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:botnet_p2p.Message.Leave)
}

::google::protobuf::uint8* Message_Leave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:botnet_p2p.Message.Leave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string guid = 1;
  if (this->guid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guid().data(), static_cast<int>(this->guid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "botnet_p2p.Message.Leave.guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botnet_p2p.Message.Leave)
  return target;
}

size_t Message_Leave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botnet_p2p.Message.Leave)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string guid = 1;
  if (this->guid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_Leave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:botnet_p2p.Message.Leave)
  GOOGLE_DCHECK_NE(&from, this);
  const Message_Leave* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message_Leave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:botnet_p2p.Message.Leave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:botnet_p2p.Message.Leave)
    MergeFrom(*source);
  }
}

void Message_Leave::MergeFrom(const Message_Leave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:botnet_p2p.Message.Leave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guid().size() > 0) {

    guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guid_);
  }
}

void Message_Leave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:botnet_p2p.Message.Leave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Leave::CopyFrom(const Message_Leave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botnet_p2p.Message.Leave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Leave::IsInitialized() const {
  return true;
}

void Message_Leave::Swap(Message_Leave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message_Leave::InternalSwap(Message_Leave* other) {
  using std::swap;
  guid_.Swap(&other->guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message_Leave::GetMetadata() const {
  protobuf_Message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Message::InitAsDefaultInstance() {
  ::botnet_p2p::_Message_default_instance_.pcommand_ = const_cast< ::botnet_p2p::Message_Command*>(
      ::botnet_p2p::Message_Command::internal_default_instance());
  ::botnet_p2p::_Message_default_instance_.presponse_ = const_cast< ::botnet_p2p::Message_Response*>(
      ::botnet_p2p::Message_Response::internal_default_instance());
  ::botnet_p2p::_Message_default_instance_.pfile_ = const_cast< ::botnet_p2p::Message_FileChunk*>(
      ::botnet_p2p::Message_FileChunk::internal_default_instance());
  ::botnet_p2p::_Message_default_instance_.pnatrequest_ = const_cast< ::botnet_p2p::Message_NATRequest*>(
      ::botnet_p2p::Message_NATRequest::internal_default_instance());
  ::botnet_p2p::_Message_default_instance_.pnatcheck_ = const_cast< ::botnet_p2p::Message_NATCheck*>(
      ::botnet_p2p::Message_NATCheck::internal_default_instance());
  ::botnet_p2p::_Message_default_instance_.pjoin_ = const_cast< ::botnet_p2p::Message_Join*>(
      ::botnet_p2p::Message_Join::internal_default_instance());
  ::botnet_p2p::_Message_default_instance_.pleave_ = const_cast< ::botnet_p2p::Message_Leave*>(
      ::botnet_p2p::Message_Leave::internal_default_instance());
}
void Message::set_allocated_pcommand(::botnet_p2p::Message_Command* pcommand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (pcommand) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pcommand = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pcommand, submessage_arena);
    }
    set_has_pcommand();
    payload_.pcommand_ = pcommand;
  }
  // @@protoc_insertion_point(field_set_allocated:botnet_p2p.Message.pCommand)
}
void Message::set_allocated_presponse(::botnet_p2p::Message_Response* presponse) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (presponse) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      presponse = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, presponse, submessage_arena);
    }
    set_has_presponse();
    payload_.presponse_ = presponse;
  }
  // @@protoc_insertion_point(field_set_allocated:botnet_p2p.Message.pResponse)
}
void Message::set_allocated_pfile(::botnet_p2p::Message_FileChunk* pfile) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (pfile) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pfile = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pfile, submessage_arena);
    }
    set_has_pfile();
    payload_.pfile_ = pfile;
  }
  // @@protoc_insertion_point(field_set_allocated:botnet_p2p.Message.pFile)
}
void Message::set_allocated_pnatrequest(::botnet_p2p::Message_NATRequest* pnatrequest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (pnatrequest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pnatrequest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pnatrequest, submessage_arena);
    }
    set_has_pnatrequest();
    payload_.pnatrequest_ = pnatrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:botnet_p2p.Message.pNATRequest)
}
void Message::set_allocated_pnatcheck(::botnet_p2p::Message_NATCheck* pnatcheck) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (pnatcheck) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pnatcheck = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pnatcheck, submessage_arena);
    }
    set_has_pnatcheck();
    payload_.pnatcheck_ = pnatcheck;
  }
  // @@protoc_insertion_point(field_set_allocated:botnet_p2p.Message.pNATCheck)
}
void Message::set_allocated_pjoin(::botnet_p2p::Message_Join* pjoin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (pjoin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pjoin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pjoin, submessage_arena);
    }
    set_has_pjoin();
    payload_.pjoin_ = pjoin;
  }
  // @@protoc_insertion_point(field_set_allocated:botnet_p2p.Message.pJoin)
}
void Message::set_allocated_pleave(::botnet_p2p::Message_Leave* pleave) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (pleave) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pleave = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pleave, submessage_arena);
    }
    set_has_pleave();
    payload_.pleave_ = pleave;
  }
  // @@protoc_insertion_point(field_set_allocated:botnet_p2p.Message.pLeave)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kUuidFieldNumber;
const int Message::kTypeFieldNumber;
const int Message::kSenderFieldNumber;
const int Message::kReceiverFieldNumber;
const int Message::kPropagationFieldNumber;
const int Message::kSignatureFieldNumber;
const int Message::kPCommandFieldNumber;
const int Message::kPResponseFieldNumber;
const int Message::kPFileFieldNumber;
const int Message::kPNATRequestFieldNumber;
const int Message::kPNATCheckFieldNumber;
const int Message::kPJoinFieldNumber;
const int Message::kPLeaveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Message_2eproto::InitDefaultsMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:botnet_p2p.Message)
}
Message::Message(const Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uuid().size() > 0) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sender().size() > 0) {
    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  receiver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.receiver().size() > 0) {
    receiver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receiver_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signature().size() > 0) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&propagation_) -
    reinterpret_cast<char*>(&type_)) + sizeof(propagation_));
  clear_has_payload();
  switch (from.payload_case()) {
    case kPCommand: {
      mutable_pcommand()->::botnet_p2p::Message_Command::MergeFrom(from.pcommand());
      break;
    }
    case kPResponse: {
      mutable_presponse()->::botnet_p2p::Message_Response::MergeFrom(from.presponse());
      break;
    }
    case kPFile: {
      mutable_pfile()->::botnet_p2p::Message_FileChunk::MergeFrom(from.pfile());
      break;
    }
    case kPNATRequest: {
      mutable_pnatrequest()->::botnet_p2p::Message_NATRequest::MergeFrom(from.pnatrequest());
      break;
    }
    case kPNATCheck: {
      mutable_pnatcheck()->::botnet_p2p::Message_NATCheck::MergeFrom(from.pnatcheck());
      break;
    }
    case kPJoin: {
      mutable_pjoin()->::botnet_p2p::Message_Join::MergeFrom(from.pjoin());
      break;
    }
    case kPLeave: {
      mutable_pleave()->::botnet_p2p::Message_Leave::MergeFrom(from.pleave());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:botnet_p2p.Message)
}

void Message::SharedCtor() {
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&propagation_) -
      reinterpret_cast<char*>(&type_)) + sizeof(propagation_));
  clear_has_payload();
  _cached_size_ = 0;
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:botnet_p2p.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_payload()) {
    clear_payload();
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  ::protobuf_Message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Message& Message::default_instance() {
  ::protobuf_Message_2eproto::InitDefaultsMessage();
  return *internal_default_instance();
}

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:botnet_p2p.Message)
  switch (payload_case()) {
    case kPCommand: {
      delete payload_.pcommand_;
      break;
    }
    case kPResponse: {
      delete payload_.presponse_;
      break;
    }
    case kPFile: {
      delete payload_.pfile_;
      break;
    }
    case kPNATRequest: {
      delete payload_.pnatrequest_;
      break;
    }
    case kPNATCheck: {
      delete payload_.pnatcheck_;
      break;
    }
    case kPJoin: {
      delete payload_.pjoin_;
      break;
    }
    case kPLeave: {
      delete payload_.pleave_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:botnet_p2p.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&propagation_) -
      reinterpret_cast<char*>(&type_)) + sizeof(propagation_));
  clear_payload();
  _internal_metadata_.Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:botnet_p2p.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), static_cast<int>(this->uuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "botnet_p2p.Message.uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .botnet_p2p.Message.MessageType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::botnet_p2p::Message_MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sender = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sender().data(), static_cast<int>(this->sender().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "botnet_p2p.Message.sender"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string receiver = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiver()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->receiver().data(), static_cast<int>(this->receiver().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "botnet_p2p.Message.receiver"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool propagation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &propagation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes signature = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .botnet_p2p.Message.Command pCommand = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pcommand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .botnet_p2p.Message.Response pResponse = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_presponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .botnet_p2p.Message.FileChunk pFile = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pfile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .botnet_p2p.Message.NATRequest pNATRequest = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pnatrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .botnet_p2p.Message.NATCheck pNATCheck = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pnatcheck()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .botnet_p2p.Message.Join pJoin = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pjoin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .botnet_p2p.Message.Leave pLeave = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pleave()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:botnet_p2p.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:botnet_p2p.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:botnet_p2p.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "botnet_p2p.Message.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // .botnet_p2p.Message.MessageType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // string sender = 3;
  if (this->sender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "botnet_p2p.Message.sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sender(), output);
  }

  // string receiver = 4;
  if (this->receiver().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->receiver().data(), static_cast<int>(this->receiver().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "botnet_p2p.Message.receiver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->receiver(), output);
  }

  // bool propagation = 5;
  if (this->propagation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->propagation(), output);
  }

  // bytes signature = 6;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->signature(), output);
  }

  // .botnet_p2p.Message.Command pCommand = 7;
  if (has_pcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *payload_.pcommand_, output);
  }

  // .botnet_p2p.Message.Response pResponse = 8;
  if (has_presponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *payload_.presponse_, output);
  }

  // .botnet_p2p.Message.FileChunk pFile = 9;
  if (has_pfile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *payload_.pfile_, output);
  }

  // .botnet_p2p.Message.NATRequest pNATRequest = 10;
  if (has_pnatrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *payload_.pnatrequest_, output);
  }

  // .botnet_p2p.Message.NATCheck pNATCheck = 11;
  if (has_pnatcheck()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *payload_.pnatcheck_, output);
  }

  // .botnet_p2p.Message.Join pJoin = 12;
  if (has_pjoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *payload_.pjoin_, output);
  }

  // .botnet_p2p.Message.Leave pLeave = 13;
  if (has_pleave()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *payload_.pleave_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:botnet_p2p.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:botnet_p2p.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "botnet_p2p.Message.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // .botnet_p2p.Message.MessageType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // string sender = 3;
  if (this->sender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "botnet_p2p.Message.sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sender(), target);
  }

  // string receiver = 4;
  if (this->receiver().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->receiver().data(), static_cast<int>(this->receiver().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "botnet_p2p.Message.receiver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->receiver(), target);
  }

  // bool propagation = 5;
  if (this->propagation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->propagation(), target);
  }

  // bytes signature = 6;
  if (this->signature().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->signature(), target);
  }

  // .botnet_p2p.Message.Command pCommand = 7;
  if (has_pcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *payload_.pcommand_, deterministic, target);
  }

  // .botnet_p2p.Message.Response pResponse = 8;
  if (has_presponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *payload_.presponse_, deterministic, target);
  }

  // .botnet_p2p.Message.FileChunk pFile = 9;
  if (has_pfile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *payload_.pfile_, deterministic, target);
  }

  // .botnet_p2p.Message.NATRequest pNATRequest = 10;
  if (has_pnatrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *payload_.pnatrequest_, deterministic, target);
  }

  // .botnet_p2p.Message.NATCheck pNATCheck = 11;
  if (has_pnatcheck()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *payload_.pnatcheck_, deterministic, target);
  }

  // .botnet_p2p.Message.Join pJoin = 12;
  if (has_pjoin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *payload_.pjoin_, deterministic, target);
  }

  // .botnet_p2p.Message.Leave pLeave = 13;
  if (has_pleave()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, *payload_.pleave_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botnet_p2p.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botnet_p2p.Message)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // string sender = 3;
  if (this->sender().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender());
  }

  // string receiver = 4;
  if (this->receiver().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->receiver());
  }

  // bytes signature = 6;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  // .botnet_p2p.Message.MessageType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool propagation = 5;
  if (this->propagation() != 0) {
    total_size += 1 + 1;
  }

  switch (payload_case()) {
    // .botnet_p2p.Message.Command pCommand = 7;
    case kPCommand: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.pcommand_);
      break;
    }
    // .botnet_p2p.Message.Response pResponse = 8;
    case kPResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.presponse_);
      break;
    }
    // .botnet_p2p.Message.FileChunk pFile = 9;
    case kPFile: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.pfile_);
      break;
    }
    // .botnet_p2p.Message.NATRequest pNATRequest = 10;
    case kPNATRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.pnatrequest_);
      break;
    }
    // .botnet_p2p.Message.NATCheck pNATCheck = 11;
    case kPNATCheck: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.pnatcheck_);
      break;
    }
    // .botnet_p2p.Message.Join pJoin = 12;
    case kPJoin: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.pjoin_);
      break;
    }
    // .botnet_p2p.Message.Leave pLeave = 13;
    case kPLeave: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.pleave_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:botnet_p2p.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:botnet_p2p.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:botnet_p2p.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:botnet_p2p.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.sender().size() > 0) {

    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  if (from.receiver().size() > 0) {

    receiver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receiver_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.propagation() != 0) {
    set_propagation(from.propagation());
  }
  switch (from.payload_case()) {
    case kPCommand: {
      mutable_pcommand()->::botnet_p2p::Message_Command::MergeFrom(from.pcommand());
      break;
    }
    case kPResponse: {
      mutable_presponse()->::botnet_p2p::Message_Response::MergeFrom(from.presponse());
      break;
    }
    case kPFile: {
      mutable_pfile()->::botnet_p2p::Message_FileChunk::MergeFrom(from.pfile());
      break;
    }
    case kPNATRequest: {
      mutable_pnatrequest()->::botnet_p2p::Message_NATRequest::MergeFrom(from.pnatrequest());
      break;
    }
    case kPNATCheck: {
      mutable_pnatcheck()->::botnet_p2p::Message_NATCheck::MergeFrom(from.pnatcheck());
      break;
    }
    case kPJoin: {
      mutable_pjoin()->::botnet_p2p::Message_Join::MergeFrom(from.pjoin());
      break;
    }
    case kPLeave: {
      mutable_pleave()->::botnet_p2p::Message_Leave::MergeFrom(from.pleave());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:botnet_p2p.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botnet_p2p.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  using std::swap;
  uuid_.Swap(&other->uuid_);
  sender_.Swap(&other->sender_);
  receiver_.Swap(&other->receiver_);
  signature_.Swap(&other->signature_);
  swap(type_, other->type_);
  swap(propagation_, other->propagation_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_Message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace botnet_p2p

// @@protoc_insertion_point(global_scope)
